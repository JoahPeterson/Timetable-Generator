@page "/"
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
<link rel="stylesheet" href="/css/background.css" />

<PageTitle>Home</PageTitle>

<div class="row logo">
    <div class="col-12 text-center">
        <img src="/images/logo.png" width="551" height="179">
    </div>
</div>
@if(loggedInUser != null)
{
    <div class="row">
        <div class="d-flex justify-content-center mt-4">
            <a href="/help" class="btn home-btn btn-lg rounded-pill me-2">Learn More</a>
            <a href="/course/create" class="btn home-btn btn-lg rounded-pill">Get Started</a>
        </div>
    </div>
}

@code {
    private User loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value;
        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthenticationAsync(objectId) ?? new();
            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;
            bool isDirty = false;
            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }

            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }

            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateAsync(loggedInUser);
                }
                else
                {
                    await userData.UpdateAsync(loggedInUser);
                }
            }
        }
    }
}