@page "/tasktype/create/{taskTypeId?}"
@using Microsoft.AspNetCore.Authorization
@using Timetable.BlazorUI.Components.Pages
@inject ITaskTypeData TaskTypeData
@inject IUserData UserData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject Blazored.Modal.Services.IModalService Modal
@rendermode InteractiveServer
@attribute [Authorize]


@* Cascading Is Required for Modal to Work *@
<CascadingBlazoredModal />

<h3>@(isEditMode ? "Edit Task Type" : "Create Task Type")</h3>


<EditForm Model="taskType" OnValidSubmit="@SaveTaskType">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label for="Name">Task Type Name:</label>
        <InputText id="name" @bind-Value="taskType.Name" class="form-control" />
        <ValidationMessage For="@(() => taskType.Name)" />
    </div>
    <div>
        <label for="Description">Task Type Description:</label>
        <InputText id="description" @bind-Value="taskType.Description" class="form-control" />
        <ValidationMessage For="@(() => taskType.Description)" />
    </div>

    <div class="d-flex flex-row-reverse">
        <button type="submit" class="btn btn-primary d-block mt-1">Save</button>
    </div>

    @if (isEditMode)
    {
        <button type="button" @onclick="ShowDeleteConfirmation"   class="btn btn-danger d-block mt-1">Delete</button>
    }
</EditForm>


@if (taskTypes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var taskType in taskTypes)
            {
                <tr>
                    <td>@taskType.Name</td>
                    <td>@taskType.Description</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditTaskType(taskType)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@* <TaskTypeTable> </TaskTypeTable> *@


@code {
    [Parameter] public string? taskTypeId { get; set; }
    private List<TaskType>? taskTypes;
    private TaskType taskType = new TaskType();
    private bool isEditMode = false;
    private bool showConfirmationModal = false;
    private User loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var loggedInUser = await UserData.GetUserFromAuthenticationAsync(user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

        if (!string.IsNullOrEmpty(taskTypeId))
        {

            isEditMode = true;
            taskType = await TaskTypeData.GetTaskTypeAsync(taskTypeId);
        }
        else
        {
            isEditMode = false;
            taskType = new TaskType();
        }

        if (user.IsInRole("Admin"))
        {
            taskTypes = await TaskTypeData.GetTaskTypesAsync();

        }
        else
        {
            taskTypes = await TaskTypeData.GetUsersTaskTypesAsync(loggedInUser.Id);
        }
    }

    private async Task Archive()
    {
        if (isEditMode)
        {
            taskType.AuditInformation.LastModified = DateTime.Now;
            taskType.AuditInformation.IsArchived = true;
            await TaskTypeData.UpdateTaskTypeAsync(taskType);

            if (taskTypes is not null)
                taskTypes.Remove(taskType);

            taskType = new TaskType();
            isEditMode = false;
        }
    }

    private void EditTaskType(TaskType selectTask)
    {
        taskType = selectTask;
        isEditMode = true;
    }

    private async Task OnConfirmationResult(bool confirmed)
    {
        showConfirmationModal = false; // Hide the modal
        if (confirmed)
        {
            await Archive();
        }
    }

    private async Task SaveTaskType()
    {
        if (isEditMode)
        {
            taskType.AuditInformation.LastModified = DateTime.Now;
            await TaskTypeData.UpdateTaskTypeAsync(taskType);
            isEditMode = false;
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            TaskType newTaskType = new TaskType
            {
                Name = taskType.Name,
                Description = taskType.Description,
            };

            newTaskType.AuditInformation.CreatedById = mongoUser.Id;

            taskTypes.Add(newTaskType);
            await TaskTypeData.CreateTaskTypeAsync(newTaskType);
        }
        
        // Redirect to the task type list or home after save
        taskType = new TaskType();
    }

    private async Task ShowDeleteConfirmation()
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", "Are you sure you want to delete this task type?");

        var modal = Modal.Show<ConfirmationDialog>("Confirm Deletion", parameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            await Archive();
        }
        else
        {
            Console.WriteLine("Deletion canceled by the user.");
        }
    }
}
