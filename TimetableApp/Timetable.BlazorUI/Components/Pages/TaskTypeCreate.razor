@page "/tasktype/create/{taskTypeId?}"
@using Microsoft.AspNetCore.Authorization
@using Timetable.BlazorUI.Components.Components

@inject ITaskTypeData TaskTypeData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject Blazored.Modal.Services.IModalService Modal

@rendermode InteractiveServer
@attribute [Authorize]

<h3>@(isEditMode ? "Edit Task Type" : "Create Task Type")</h3>

<EditForm Model="taskType" OnValidSubmit="@SaveTaskType">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label for="Name">Task Type Name:</label>
        <InputText id="name" @bind-Value="taskType.Name" class="form-control" />
        <ValidationMessage For="@(() => taskType.Name)" />
    </div>
    <div>
        <label for="Description">Task Type Description:</label>
        <InputText id="description" @bind-Value="taskType.Description" class="form-control" />
        <ValidationMessage For="@(() => taskType.Description)" />
    </div>

    <button type="submit" class="btn btn-primary d-block mt-1">Save</button>

    @if (isEditMode)
    {
        <button type="button" @onclick="ShowDeleteConfirmation" class="btn btn-danger d-block mt-1">Delete</button>
    }
</EditForm>

@code {
    [Parameter] public string? taskTypeId { get; set; }

    private TaskType taskType = new TaskType();
    private bool isEditMode = false;
    private bool showConfirmationModal = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(taskTypeId))
        {
            isEditMode = true;
            taskType = await TaskTypeData.GetTaskTypeByIdAsync(taskTypeId);
        }
        else
        {
            isEditMode = false;
            taskType = new TaskType();
        }
    }

    private async Task SaveTaskType()
    {
        if (isEditMode)
        {
            taskType.AuditInformation.LastModified = DateTime.Now;
            await TaskTypeData.UpdateTaskTypeAsync(taskType);
        }
        else
        {
            TaskType newTaskType = new TaskType
            {
                Name = taskType.Name,
                Description = taskType.Description,
            };
            await TaskTypeData.CreateTaskTypeAsync(newTaskType);
        }

        // Redirect to the task type list or home after save
        Navigation.NavigateTo("/");
    }

    private async Task ShowDeleteConfirmation()
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", "Are you sure you want to delete this task type?");

        var modal = Modal.Show<ConfirmationDialog>("Confirm Deletion", parameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            await Archive();
        }
        else
        {
            Console.WriteLine("Deletion canceled by the user.");
        }
    }

    private async Task OnConfirmationResult(bool confirmed)
    {
        showConfirmationModal = false; // Hide the modal
        if (confirmed)
        {
            await Archive();
        }
    }

    private async Task Archive()
    {
        if (isEditMode && !string.IsNullOrEmpty(taskTypeId))
        {
            taskType.AuditInformation.LastModified = DateTime.Now;
            taskType.AuditInformation.IsArchived = true;
            await TaskTypeData.UpdateTaskTypeAsync(taskType);
            Navigation.NavigateTo("/");
        }
    }
}
