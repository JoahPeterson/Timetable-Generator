@page "/tasktype/create/{taskTypeId?}"
@using Microsoft.AspNetCore.Authorization
@using Timetable.BlazorUI.Components.Pages
@inject ITaskTypeData TaskTypeData
@inject IUserData UserData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer
@attribute [Authorize]


<EditForm Model="taskType" OnValidSubmit="@SaveTaskType" FormName="TasktypeForm">
    <DataAnnotationsValidator/>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="bg-light rounded-2 mt-5 p-3">
                    <h3 class="text-center mb-3 mt-5 fw-bold">@(isEditMode ? "Edit Task Type" : "Create Task Type")</h3>
                    <div class="d-flex flex-column">
                        <div class="form-group row mt-2">
                            <label for="Name" class="col-4 col-form-label fw-bold">Task Type Name</label>
                            <div class="col-8">
                                <InputText id="name" @bind-Value="taskType.Name" class="form-control" placeholder="Task Type Name" />
                                <ValidationMessage For="@(() => taskType.Name)" />
                            </div>
                        </div>
                        <div class="form-group row mt-2">
                            <label class="col-sm-4 col-form-label fw-bold" for="ToolTip">Task Type Description</label>
                            <div class="col-8">
                                <InputTextArea id="description" @bind-Value="taskType.Description" class="form-control" placeholder="Task Type Description" />
                                <ValidationMessage For="@(() => taskType.Description)" />
                            </div>
                        </div>
                        <div class="d-flex justify-content-center mt-4">
                            <button type="submit" class="btn mstc-gold-btn text-dark fw-bold px-4 mx-2">
                                <i class="bi bi-floppy"></i> Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public string? taskTypeId { get; set; }
    private List<TaskType>? taskTypes;
    private TaskType taskType = new TaskType();
    private bool isEditMode = false;
    private User loggedInUser;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var loggedInUser = await UserData.GetUserFromAuthenticationAsync(user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

        if (!string.IsNullOrEmpty(taskTypeId))
        {

            isEditMode = true;
            taskType = await TaskTypeData.GetTaskTypeAsync(taskTypeId);
        }
        else
        {
            isEditMode = false;
            taskType = new TaskType();
        }

        if (user.IsInRole("Admin"))
        {
            taskTypes = await TaskTypeData.GetTaskTypesAsync();

        }
        else
        {
            taskTypes = await TaskTypeData.GetUsersTaskTypesAsync(loggedInUser.Id);
        }
    }

    private void EditTaskType(TaskType selectTask)
    {
        taskType = selectTask;
        isEditMode = true;
    }

    private async Task SaveTaskType()
    {
        if (isEditMode)
        {
            taskType.AuditInformation.LastModified = DateTime.Now;
            await TaskTypeData.UpdateTaskTypeAsync(taskType);
            isEditMode = false;
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            TaskType newTaskType = new TaskType
            {
                Name = taskType.Name,
                Description = taskType.Description,
            };

            newTaskType.AuditInformation.CreatedById = mongoUser.Id;

            taskTypes.Add(newTaskType);
            await TaskTypeData.CreateTaskTypeAsync(newTaskType);
        }

        // Redirect to the task type list or home after save
        taskType = new TaskType();
        Navigation.NavigateTo("/dashboard");
    }

}
