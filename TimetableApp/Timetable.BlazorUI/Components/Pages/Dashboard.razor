@page "/dashboard"
@using Timetable.BlazorUI.Components.Components
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-4 col-sm-12 mb-sm-3 mb-2 col-md-12">
            <CoursesDiv/>
        </div>
        <div class="col-lg-4 col-sm-12 col-md-12 mb-2">
            <TaskTypesDiv/>
        </div>
        <div class="col-lg-4 col-sm-12 col-md-12 mb-2">
            <TaskDiv/>
        </div>
    </div>
</div>

<AuthorizeView Roles="Admin">
<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-4 col-sm-12 mb-sm-3 mb-2 col-md-12">
            <CourseTypesDiv/>
        </div>
        <div class="col-lg-4 col-sm-12 mb-sm-3 mb-2 col-md-12">
            <!--Users Div-->
        </div>
        <div class="col-lg-4 col-sm-12 mb-sm-3 mb-2 col-md-12">
            <!--Terms Div-->
        </div>
    </div>
</div>
</AuthorizeView>

@* <ConfirmDialog OnClose="OnClose" /> *@

@code{
    //TODO: This was to remove the item from if statement below.
    //private object? selectedItem; 
    // private CoursesDiv CourseDivObject;
    // private CourseTypesDiv CourseTypeDivObject;
    // private TaskDiv TaskDivObject;
    // private TaskTypesDiv TaskTypeDivObject;

//TODO: Remove Remenants of JS Modal
    // private async Task OnClose()
    // {
    //     if (selectedItem is Course course)
    //     {
    //         await CourseDivObject.Archive(); 
    //     }
    //     else if (selectedItem is TaskType taskType)
    //     {
    //         await TaskTypeDivObject.Archive(taskType);
    //     }
    //     // else if (selectedItem is CourseType courseType)
    //     // {
    //     //     await CourseTypeDivObject.Archive(courseType);
    //     // }
    //     else if (selectedItem is WorkTask workTask)
    //     {
    //         await TaskDivObject.Archive(workTask);
    //     }

    // }

    // private async Task ShowModal(object item)
    // {
    //     selectedItem = item;
    //     await JS.InvokeVoidAsync("modalInterop.showModal", "modal-1");
    // }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await JS.InvokeVoidAsync("initializeModal");
    //     }
    // }

}

