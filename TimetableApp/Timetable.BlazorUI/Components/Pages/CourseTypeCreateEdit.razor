@page "/coursetype/create/{courseTypeId?}"
@inject IDialogService DialogService
@using Microsoft.AspNetCore.Authorization
@inject ICourseTypeData CourseTypeData
@inject IUserData UserData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer
@attribute [Authorize]

<EditForm Model="courseType" OnValidSubmit="@SaveCourseType" FormName="CourseTypeForm">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="bg-light rounded-2 mt-5 p-3">
                    <h3 class="text-center mb-3 mt-5 fw-bold">@(isEditMode ? "Edit Modality" : "Create Modality")</h3>
                    <div class="d-flex flex-column">
                        <div class="form-group row mt-2">
                            <label for="Name" class="col-4 col-form-label fw-bold">Modality Name</label>
                            <div class="col-8">
                                <InputText id="name" @bind-Value="courseType.Name" class="form-control" placeholder="Modality Name" />
                                <ValidationMessage For="@(() =>courseType.Name)" />
                            </div>
                        </div>
                        <div class="form-group row mt-2">
                            <label class="col-sm-4 col-form-label fw-bold" for="ToolTip">Modality Description</label>
                            <div class="col-8">
                                <InputTextArea id="toolTip" @bind-Value="courseType.ToolTip" class="form-control" placeholder="Modality Description" />
                                <ValidationMessage For="@(() => courseType.ToolTip)" />
                            </div>
                        </div>
                        <div class="d-flex justify-content-center mt-4">
                            <button type="submit" class="btn mstc-gold-btn text-dark fw-bold px-4 mx-2">
                                <i class="bi bi-floppy"></i> Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public string? courseTypeId { get; set; }

    private CourseType courseType = new CourseType();
    private bool isEditMode = false;
    // private bool showConfirmationModal = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(courseTypeId))
        {

            isEditMode = true;
            courseType = await CourseTypeData.GetByIdAsync(courseTypeId);
        }
        else
        {
            isEditMode = false;
            courseType = new CourseType();
        }
    }

    //TODO: This is an old remenant can be removed.
    // private async Task Archive()
    // {
    //     if (isEditMode && !string.IsNullOrEmpty(courseTypeId))
    //     {
    //         courseType.AuditInformation.LastModified = DateTime.Now;
    //         courseType.AuditInformation.IsArchived = true;
    //         await CourseTypeData.UpdateAsync(courseType);
    //         Navigation.NavigateTo("/");
    //     }
    // }

    // private async Task OnConfirmationResult(bool confirmed)
    // {
    //     showConfirmationModal = false; // Hide the modal
    //     if (confirmed)
    //     {
    //         await Archive();
    //     }
    // }

    private async Task SaveCourseType()
    {
        if (isEditMode)
        {
            courseType.AuditInformation.LastModified = DateTime.Now;
            await CourseTypeData.UpdateAsync(courseType);
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            CourseType newCourseType = new CourseType
                {
                    Name = courseType.Name,
                    ToolTip = courseType.ToolTip,
                };

            newCourseType.AuditInformation.CreatedById = mongoUser.Id;

            await CourseTypeData.CreateAsync(newCourseType);
        }

        // Redirect to the course type list or home after save
        Navigation.NavigateTo("/dashboard");
    }

    private async Task ShowDeleteConfirmation()
    {
        var parameters = new DialogParameters<Confimation_Dialog>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var result = DialogService.ShowAsync<Confimation_Dialog>("Delete", parameters, options).Result;
    }
}
