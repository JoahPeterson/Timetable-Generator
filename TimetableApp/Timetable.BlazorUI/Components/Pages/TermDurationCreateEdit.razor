@page "/termDuration/create/{termDurationId?}"
@using Microsoft.AspNetCore.Authorization
@using Timetable.BlazorUI.Components.Pages
@inject ITermDurationData TermDurationData
@inject IUserData UserData
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer
@attribute [Authorize]

<EditForm Model="termDuration" OnValidSubmit="@SaveTermDuration" FormName="TermDurationForm">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="bg-light rounded-2 mt-5 p-3">
                    <h3 class="text-center mb-3 mt-5 fw-bold">@(isEditMode ? "Edit Term Duration" : "Create Term Duration")</h3>
                    <div class="d-flex flex-column">
                        <div class="form-group row mt-2">
                            <label for="Name" class="col-4 col-form-label fw-bold">Term Duration Length</label>
                            <div class="col-8">
                                <InputNumber id="name" @bind-Value="termDuration.Length" class="form-control" placeholder="Term Length" />
                                <ValidationMessage For="@(() => termDuration.Length)" />
                            </div>
                        </div>
                        <div class="d-flex justify-content-center mt-4">
                            <button type="submit" class="btn mstc-gold-btn text-dark fw-bold px-4 mx-2">
                                <i class="bi bi-floppy"></i> Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public string? termDurationId { get; set; }
    private TermDuration termDuration = new TermDuration();
    private bool isEditMode = false;
    private User loggedInUser;
    private string toastMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var loggedInUser = await UserData.GetUserFromAuthenticationAsync(user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

        if (!string.IsNullOrEmpty(termDurationId))
        {

            isEditMode = true;
            termDuration = await TermDurationData.GetByIdAsync(termDurationId);
        }
        else
        {
            isEditMode = false;
            termDuration = new TermDuration();
        }

    }

    private async Task SaveTermDuration()
    {
        if (isEditMode)
        {
            termDuration.AuditInformation.LastModified = DateTime.Now;
            await TermDurationData.UpdateAsync(termDuration);
            isEditMode = false;
            toastMessage = "Term Duration Edited";
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            TermDuration newTermDuration = new TermDuration
                {
                    Length = termDuration.Length
                };

            newTermDuration.AuditInformation.CreatedById = mongoUser.Id;


            await TermDurationData.CreateAsync(newTermDuration);
            toastMessage = "Term Duration Created";
        }

        Snackbar.Add(toastMessage, Severity.Success);
        Navigation.NavigateTo("/dashboard");
    }
}
