@page "/course/create/{courseId?}"
@using Microsoft.AspNetCore.Authorization
@inject ICourseData CourseData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject Blazored.Modal.Services.IModalService Modal
@inject ICourseTypeData CourseTypeData
@inject ITermData TermData
@inject ITermDurationData TermDurationData
@inject IUserData UserData
@rendermode InteractiveServer
@using TimetableApp.DataModels.Models
@attribute [Authorize]

@* Cascading Is Required for Modal to Work *@
<CascadingBlazoredModal />

<h3>@(isEditMode ? "Edit Course" : "Create Course")</h3>


<EditForm Model="course" OnValidSubmit="@SaveCourse">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label class="form-label" for="Name">Course Name:</label>
        <InputText id="name" @bind-Value="course.Name" class="form-control" />
        <ValidationMessage For="@(() => course.Name)" />
    </div>
    <div>
        <label class="form-label" for="Description">Course Description:</label>
        <InputText id="description" @bind-Value="course.Description" class="form-control" />
        <ValidationMessage For="@(() => course.Description)" />
    </div>
    <div>
        <label class="form-label" for="StartDate">Course Start Date:</label>
        <input type="date" id="startDate" @bind="course.StartDate" class="form-control" />
        <ValidationMessage For="@(() => course.StartDate)" />
    </div>
    <div>
        <label class="form-label" for="EndDate">Course End Date:</label>
        <input type="date" id="endDate" @bind="course.EndDate" class="form-control" />
        <ValidationMessage For="@(() => course.EndDate)" />
    </div>
    <div>
        <label class="form-label" for="CourseTypeId">Course Type:</label>
        <InputSelect id="courseTypeId" @bind-Value="course.CourseTypeId" class="form-control">
            @foreach (var type in courseTypes)
            {
                <option value="@type.Id">@type.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => course.CourseTypeId)" />
    </div>
    <div>
        <label class="form-label" for="TermId">Course Term:</label>
        <InputSelect id="term" @bind-Value="course.Term.Id" class="form-control">
            @foreach (var term in terms)
            {
                <option value="@term.Id">@term.Name</option>
            }
        </InputSelect>
    </div>
    <div>
        <label class="form-label" for="TermDuration">Term Duration:</label>
        <InputSelect id="termDurationId" @bind-Value="course.Term.Duration" class="form-control">
            @foreach (var duration in termDurations)
            {
                <option value="@duration.Length">@duration.Length weeks</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => course.Term.Duration)" />
    </div>
    <button type="submit" class="btn btn-primary d-block mt-2">Save</button>

    @if (isEditMode)
    {
        <button type="button" @onclick="ShowDeleteConfirmation" class="btn btn-danger d-block mt-2">Delete</button>
    }
</EditForm>

@code {
    [Parameter] public string? courseId { get; set; }

    private Course course = new Course();
    private List<CourseType> courseTypes = new List<CourseType>();
    private List<Term> terms = new List<Term>();
    private List<TermDuration> termDurations = new List<TermDuration>();
    private bool isEditMode = false;
    private bool showConfirmationModal = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(courseId))
        {

            isEditMode = true;
            course = await CourseData.GetCourseAsync(courseId);
        }
        else
        {
            isEditMode = false;
            course = new Course();
            course.StartDate = DateTime.Now;
            course.EndDate = DateTime.Now;
        }

        // Fetch course types from the database
        courseTypes = await CourseTypeData.GetAsync();

        // Fetch terms from the database
        terms = await TermData.GetAsync();

        // Fetch term durations from the database
        termDurations = await TermDurationData.GetAsync();
    }

    private async Task Archive()
    {
        if (isEditMode && !string.IsNullOrEmpty(courseId))
        {
            course.AuditInformation.LastModified = DateTime.Now;
            course.AuditInformation.IsArchived = true;
            await CourseData.UpdateCourseAsync(course);
            Navigation.NavigateTo("/");
        }
    }

    private async Task OnConfirmationResult(bool confirmed)
    {
        showConfirmationModal = false; // Hide the modal
        if (confirmed)
        {
            await Archive();
        }
    }

    private async Task SaveCourse()
    {
        if (isEditMode)
        {
            course.AuditInformation.LastModified = DateTime.Now;
            course.Term = terms.FirstOrDefault(term => term.Id == course.Term.Id);
            await CourseData.UpdateCourseAsync(course);
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            Course newCourse = new Course
                {
                    Name = course.Name,
                    Description = course.Description,
                    StartDate = course.StartDate,
                    EndDate = course.EndDate,
                    CourseTypeId = course.CourseTypeId,
                    Term = terms.FirstOrDefault(term => term.Id == course.Term.Id),
                };

            newCourse.AuditInformation.CreatedById = mongoUser.Id;

            await CourseData.CreateCourseAsync(newCourse);
        }

        // Redirect to the course list or home after save
        Navigation.NavigateTo("/");
    }

    private async Task ShowDeleteConfirmation()
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", "Are you sure you want to delete this course?");

        var modal = Modal.Show<ConfirmationDialog>("Confirm Deletion", parameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            await Archive();
        }
        else
        {
            Console.WriteLine("Deletion canceled by the user.");
        }
    }
}
