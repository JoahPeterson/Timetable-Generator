@page "/course/create/{courseId?}"
@using Microsoft.AspNetCore.Authorization
@inject ICourseData CourseData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject Blazored.Modal.Services.IModalService Modal
@inject ICourseTypeData CourseTypeData
@inject ITermData TermData
@inject ITermDurationData TermDurationData
@inject IUserData UserData
@rendermode InteractiveServer
@using TimetableApp.DataModels.Models
@attribute [Authorize]

@* Cascading Is Required for Modal to Work *@
<CascadingBlazoredModal />

<CascadingBlazoredModal/>




<EditForm Model="course" OnValidSubmit="@SaveCourse" FormName="CourseForm">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="bg-light rounded-2 mt-5 p-3">
                    <h3 class="text-center mb-3 fw-bold">@(isEditMode ? "Edit Course" : "Create Course")</h3>
                    <div class="d-flex flex-column">
                        <div class="form-group row mt-2">
                            <label for="Name" class="col-4 col-form-label fw-bold">Course Name</label>
                            <div class="col-8">
                                <InputText id="name" @bind-Value="course.Name" class="form-control" placeholder="Course Name" />
                                <ValidationMessage For="@(() => course.Name)" />
                            </div>
                        </div>
                        <div class="form-group row mt-2">
                            <label class="col-sm-4 col-form-label fw-bold" for="Description">Course Description</label>
                            <div class="col-8">
                                <InputTextArea id="description" @bind-Value="course.Description" class="form-control" placeholder="Course Description" />
                                <ValidationMessage For="@(() => course.Description)" />
                            </div>
                        </div>
                        <div class="form-group row mt-2">
                            <label class="col-sm-4 col-form-label fw-bold" for="StartDate">Course Start Date</label>
                            <div class="col-8">
                                <input type="date" id="startDate" @bind="course.StartDate" class="form-control" />
                                <ValidationMessage For="@(() => course.StartDate)" />
                            </div>
                        </div>
                        <div class="form-group row mt-2">
                            <label class="col-sm-4 col-form-label fw-bold" for="EndDate">Course End Date</label>
                            <div class="col-8">
                                <input type="date" id="endDate" @bind="course.EndDate" class="form-control" />
                                <ValidationMessage For="@(() => course.EndDate)" />
                            </div>
                        </div>
                        <div class="form-group row mt-2">
                            <label class="col-sm-4 col-form-label fw-bold" for="CourseTypeId">Course Type</label>
                            <div class="col-8">
                                <InputSelect id="courseTypeId" @bind-Value="course.CourseTypeId" class="form-control">
                                    <option>Select Course Type</option>
                                    @foreach (var type in courseTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => course.CourseTypeId)" />
                            </div>
                        </div>
                        <div class="form-group row mt-2">
                            <label class="col-sm-4 col-form-label fw-bold" for="TermId">Course Term</label>
                            <div class="col-8">
                                <InputSelect id="term" @bind-Value="course.Term.Id" class="form-control">
                                    <option>Select Course Term</option>
                                    @foreach (var term in terms)
                                    {
                                        <option value="@term.Id">@term.Name</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <div class="form-group row mt-2">
                            <label class="col-sm-4 col-form-label fw-bold" for="TermDuration">Term Duration</label>
                            <div class="col-8">
                                <InputSelect id="termDurationId" @bind-Value="course.Term.Duration" class="form-control">
                                    <option>Select Term Duration</option>
                                    @foreach (var duration in termDurations)
                                    {
                                        <option value="@duration.Length">@duration.Length weeks</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => course.Term.Duration)" />
                            </div>
                        </div>
                        <div class="d-flex justify-content-center mt-4">
                            @if (isEditMode)
                            {
                                <button type="button" @onclick="ShowDeleteConfirmation" class="btn btn-danger fw-bold">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            }
                            <button type="submit" class="btn mstc-gold-btn text-dark fw-bold px-4 mx-2">
                                <i class="bi bi-floppy"></i> Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public string? courseId { get; set; }

    private Course course = new Course();
    private List<CourseType> courseTypes = new List<CourseType>();
    private List<Term> terms = new List<Term>();
    private List<TermDuration> termDurations = new List<TermDuration>();
    private bool isEditMode = false;

// TODO: This can be removed:
    // private bool showConfirmationModal = false;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(courseId))
        {
            isEditMode = true;
            course = await CourseData.GetCourseAsync(courseId);
        }
        else
        {
            isEditMode = false;
            course = new Course();
            course.StartDate = DateTime.Now;
            course.EndDate = DateTime.Now;
        }

        // Fetch course types from the database
        courseTypes = await CourseTypeData.GetAsync();

        // Fetch terms from the database
        terms = await TermData.GetAllAsync();

        // Fetch term durations from the database
        termDurations = await TermDurationData.GetAsync();
    }

// TODO: This can be removed:
    // private async Task Archive()
    // {
    //     if (isEditMode && !string.IsNullOrEmpty(courseId))
    //     {
    //         course.AuditInformation.LastModified = DateTime.Now;
    //         course.AuditInformation.IsArchived = true;
    //         await CourseData.UpdateCourseAsync(course);
    //         Navigation.NavigateTo("/");
    //     }
    // }

// TODO: This can be removed:
    // private async Task OnConfirmationResult(bool confirmed)
    // {
    //     showConfirmationModal = false; // Hide the modal
    //     if (confirmed)
    //     {
    //         await Archive();
    //     }
    // }

    private async Task SaveCourse()
    {
        if (isEditMode)
        {
            course.AuditInformation.LastModified = DateTime.Now;

            var termFromDb = await TermData.GetByIdAsync(course.Term.Id);
            termFromDb.Duration = course.Term.Duration;
            course.Term = termFromDb;

            await CourseData.UpdateCourseAsync(course);
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            Course newCourse = new Course
                {
                    Name = course.Name,
                    Description = course.Description,
                    StartDate = course.StartDate,
                    EndDate = course.EndDate,
                    CourseTypeId = course.CourseTypeId,
                    Term = await TermData.GetByIdAsync(course.Term.Id),
                };

            newCourse.Term.Duration = course.Term.Duration;
            newCourse.AuditInformation.CreatedById = mongoUser.Id;

            // Save the course
            await CourseData.CreateCourseAsync(newCourse);
            course = newCourse;  // Assign the newly created course to the 'course' model
        }

        // Show the modal for course preview
        await ShowCoursePreviewModal();
    }

    private async Task ShowCoursePreviewModal()
    {
        var parameters = new ModalParameters();
        parameters.Add("Course", course);  // Pass the saved course to the modal

        var modal = Modal.Show<PreviewDialog>("Preview", parameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            if ((bool)result.Data)  // This indicates "Continue to Timetable" was clicked
            {
                // Navigate to the timetable creation page
                Navigation.NavigateTo($"/timetable/{course.Id}");
            }
            else
            {
                // Navigate to the edit course page
                Navigation.NavigateTo($"/course/create/{course.Id}");
            }
        }
    }

// TODO: This can be removed:
    // private async Task ShowDeleteConfirmation()
    // {
    //     var parameters = new ModalParameters();
    //     parameters.Add("Message", "Are you sure you want to delete this course?");

    //     var modal = Modal.Show<ConfirmationDialog>("Confirm Deletion", parameters);
    //     var result = await modal.Result;

    //     if (!result.Cancelled)
    //     {
    //         await Archive();
    //     }
    //     else
    //     {
    //         Console.WriteLine("Deletion canceled by the user.");
    //     }
    // }
}
