@page "/admin/term/"
@using Microsoft.AspNetCore.Authorization
@using Timetable.BlazorUI.Data
@inject ITermData TermData
@inject ITermDurationData DurationData
@inject IUserData UserData
@inject ITermDurationData TermDurationData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject Blazored.Modal.Services.IModalService Modal
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

@* Cascading Is Required for Modal to Work *@
<CascadingBlazoredModal />

<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <TermForm TermToEdit="selectedTerm" OnSave="SaveTerm"/>
            <TermTable Terms="terms" OnEdit="EditTerm" />
        </div>
        <div class="col-lg-6">
            <TermDurationForm TermDurationToEdit="selectedTermDuration" OnSave="SaveTermDuration"/>
            <TermDurationTable TermDurations="termDurations" OnEdit="EditTermDuration"/>
        </div>
    </div>
</div>
@code {
    private List<Term> terms = new List<Term>();
    private List<TermDuration> termDurations = new List<TermDuration>();
    private Term? selectedTerm = null;
    private TermDuration? selectedTermDuration = null;

    protected override async Task OnInitializedAsync()
    {
        var termTask = TermData.GetAllWithArchivedAsync();
        var termDurationTask = TermDurationData.GetAsync();

        await Task.WhenAll(termTask, termDurationTask);

        terms = termTask.Result;
        termDurations = termDurationTask.Result;
    }


    private async Task EditTerm(Term item)
    {
        selectedTerm = item;
    }

    private async Task EditTermDuration(TermDuration termDuration)
    {
        selectedTermDuration = termDuration;
    }


    private async Task SaveTerm(Term term)
    {
        var index = terms.FindIndex(t => t.Id == term.Id);

        if (index != -1)
            terms[index] = term;
        else
            terms.Add(term);

        selectedTerm = null;
    }

    private async Task SaveTermDuration(TermDuration termDuration)
    {
        var index = termDurations.FindIndex(td => td.Id == termDuration.Id);

        if (index != -1)
            termDurations[index] = termDuration;
        else
            termDurations.Add(termDuration);

        selectedTermDuration = null;
    }
}
