@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject ITermDurationData TermDurationData
@inject IUserData UserData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]


<h3>@(isEditMode ? "Edit Duration" : "Create Duration")</h3>

<EditForm FormName="TermDuration" Model="termDuration" OnValidSubmit="SaveDuration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="Duration">Term Duration:</label>
        <InputNumber id="duration" @bind-Value="termDuration.Length" class="form-control" />
        <ValidationMessage For="@(() =>termDuration.Length)" />
    </div>


    <div class="d-flex flex-row mt-3 justify-content-end">
        <button type="submit" class="btn btn-primary d-block m-1">Save</button>
        @if (isEditMode && termDuration.AuditInformation.IsArchived == false)
        {
            <button type="button" @onclick="ShowModal" class="btn btn-danger d-block m-1">Delete</button>
        }

        @if (isEditMode && termDuration.AuditInformation.IsArchived == true)
        {
            <button type="button" @onclick="Restore" class="btn btn-primary d-block m-1">Restore</button>
        }
    </div>
</EditForm>

@code {
    [Parameter] public TermDuration? TermDurationToEdit { get; set; }

    [Parameter]
    public EventCallback<TermDuration> OnSave { get; set; }

    private TermDuration termDuration = new TermDuration();

    private bool isEditMode = false;
    private bool showConfirmationModal = false;

    protected override void OnParametersSet()
    {
        if (TermDurationToEdit != null)
        {
            termDuration = TermDurationToEdit;
            isEditMode = true;
        }
    }

    private async Task Archive()
    {
        if (isEditMode && termDuration != null)
        {
            termDuration.AuditInformation.IsArchived = true;
            await SaveDuration();
        }
    }

    private async Task OnConfirmationResult(bool confirmed)
    {
        showConfirmationModal = false; // Hide the modal
        if (confirmed)
        {
            await Archive();
            termDuration = new TermDuration();
        }
    }

    private async Task Restore()
    {
        if (isEditMode && termDuration != null)
        {
            termDuration.AuditInformation.IsArchived = false;
            await SaveDuration();
        }
    }

    private async Task SaveDuration()
    {
        if (isEditMode)
        {
            termDuration.AuditInformation.LastModified = DateTime.Now;
            await TermDurationData.UpdateAsync(termDuration);
            isEditMode = false;
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            TermDuration newTermDuration = new TermDuration()
                {
                    Length = termDuration.Length,
                };

            newTermDuration.AuditInformation.CreatedById = mongoUser.Id;

            await TermDurationData.CreateAsync(newTermDuration);
        }

        await OnSave.InvokeAsync(termDuration);
        termDuration = new TermDuration();
        StateHasChanged();
    }

    private async Task ShowModal()
    {

    }
}