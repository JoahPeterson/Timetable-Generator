@using Blazored.Modal
@using Blazored.Modal.Services
@inject NavigationManager Navigation
@inject ICourseTypeData CourseTypeData

<div class="card bg-light p-3">
    <div class="card-body">
        <h4 class="card-title">Course Preview</h4>
        <p class="card-text"><strong>Course Name:</strong> @Course.Name</p>
        <p class="card-text"><strong>Description:</strong> @Course.Description</p>
        <p class="card-text"><strong>Start Date:</strong> @Course.StartDate.ToShortDateString()</p>
        <p class="card-text"><strong>End Date:</strong> @Course.EndDate.ToShortDateString()</p>
        <p class="card-text"><strong>Course Type:</strong> @CourseTypeName</p>
        <p class="card-text"><strong>Term:</strong> @Course.Term.Name</p>
        <p class="card-text"><strong>Duration:</strong> @Course.Term.Duration weeks</p>
    </div>
</div>
<div class="modal-footer mt-2">
    <button class="btn btn-secondary" @onclick="ContinueEditing">Continue Editing</button>
    <button class="btn mstc-gold-btn mx-2" @onclick="ProceedToTimetable">Continue to Timetable</button>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] public Course Course { get; set; }

    private string CourseTypeName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var courseType = await CourseTypeData.GetByIdAsync(Course.CourseTypeId);

        CourseTypeName = courseType.Name;
    }

    private async Task ContinueEditing()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok(false));  // Pass false to indicate editing
    }

    private async Task ProceedToTimetable()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok(true));  // Pass true to indicate timetable navigation
    }
}