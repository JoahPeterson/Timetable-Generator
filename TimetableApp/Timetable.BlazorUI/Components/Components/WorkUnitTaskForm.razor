@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IWorkUnitData WorkUnitData  

@* <div class="modal micromodal-slide" id="form-modal" aria-hidden="true">
    <div class="modal__overlay" tabindex="-1" data-micromodal-close>
        <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="form-modal-title">
            <header class="modal__header">
                <h2 class="modal__title" id="form-modal-title">
                    Task Information
                </h2>S
                <button class="modal__close" aria-label="Close modal" data-micromodal-close></button>
            </header>
            <main class="modal__content" id="form-modal-content">
                <div class="card bg-light p-3">
                    <div class="card-body">
                        <EditForm Model="workUnitTask" OnValidSubmit="@SaveWorkUnitTask">
                            <div class="form-group row mt-2">
                                <label class="col-sm-4 col-form-label fw-bold" for="Duration">Duration (In Minutes)</label>
                                <div class="col-8">
                                    <InputText id="duration" @bind-Value="workUnitTask.Duration" class="form-control" placeholder="Duration" />
                                    <ValidationMessage For="@(() => workUnitTask.Duration)" />
                                </div>
                            </div>
                            <div class="form-group row mt-2">
                                <label class="col-sm-4 col-form-label fw-bold" for="Duration">Due Date</label>
                                <div class="col-8">
                                    <InputDate id="dueDate" @bind-Value="workUnitTask.DueDate" class="form-control"/>
                                    <ValidationMessage For="@(() => workUnitTask.DueDate)" />
                                </div>
                            </div>
                            <div class="form-group row mt-2">
                                <label class="col-sm-4 col-form-label fw-bold" for="SequenceNumber">Sequence Number</label>
                                <div class="col-8">
                                    <InputNumber id="sequenceNumber" @bind-Value="workUnitTask.SequenceNumber" class="form-control" placeholder="Sequence Number" />
                                    <ValidationMessage For="@(() => workUnitTask.SequenceNumber)" />
                                </div>
                            </div>
                            <div class="d-flex justify-content-center mt-4">
                                <button type="submit" @onclick="OnCloseButtonClick" class="btn mstc-gold-btn text-dark fw-bold px-4 mx-2">
                                    <i class="bi bi-floppy"></i> Save
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </main>
            <footer class="modal-footer mt-2">
                <!-- Footer content here if needed -->
            </footer>
        </div>
    </div>
</div>
 *@
@* @code {
    public WorkUnitTask? workUnitTaskToUpdate;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter] public WorkUnit currentWorkUnit { get; set; }  

    public WorkUnitTask workUnitTask = new();

    private WorkUnit workUnit;

    public WorkTask? workTask;


    public string? workUnitTaskId;


    protected override void OnParametersSet()
    {
        workUnit = currentWorkUnit;

        if (workUnitTaskToUpdate == null)
        {
            workUnitTask = new();
        }
        else
        {
            workUnitTask = workUnitTaskToUpdate;
        }

    }
    private async Task SaveWorkUnitTask()
    {
        WorkUnitTask tempWorkUnitTask = workUnitTaskToUpdate;
        if(tempWorkUnitTask == null)
        {
            tempWorkUnitTask = new WorkUnitTask
                {
                    Id = Guid.NewGuid().ToString(),
                    TaskId = workTask.Id,
                    WorkUnitId = workUnit.Id
                };
            workUnit.Tasks.Add(tempWorkUnitTask);
        }
        workUnitTaskToUpdate = workUnit.Tasks.Where(task => task.Id == tempWorkUnitTask.Id).First();
        workUnitTaskToUpdate.Duration = workUnitTask.Duration;
        workUnitTaskToUpdate.DueDate = workUnitTask.DueDate;
        workUnitTaskToUpdate.SequenceNumber = workUnitTask.SequenceNumber;


        await WorkUnitData.UpdateAsync(workUnit);

        workUnitTaskToUpdate = null;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeModal");
        }
        
    } 

    private async Task OnCloseButtonClick()
    {
        await OnClose.InvokeAsync(null);
    }


} *@

@code {
    public WorkUnitTask? workUnitTaskToUpdate;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter] public WorkUnit currentWorkUnit { get; set; }

    public WorkUnitTask workUnitTask = new();

    private WorkUnit workUnit;

    public WorkTask? workTask;

    public string? workUnitTaskId;

    // Use to differentiate between create and update
    private bool isEditing = false;

    protected override void OnParametersSet()
    {
        workUnit = currentWorkUnit;

        // If a task is set for editing, prepopulate the form, otherwise, create a new one
        if (workUnitTaskToUpdate == null)
        {
            workUnitTask = new WorkUnitTask
                {
                    Id = Guid.NewGuid().ToString(),
                    TaskId = workTask != null ? workTask.Id : string.Empty,
                    WorkUnitId = workUnit.Id
                };
            isEditing = false;  // New task creation
        }
        else
        {
            workUnitTask = workUnitTaskToUpdate;
            isEditing = true;  // Editing existing task
        }
    }

    private async Task SaveWorkUnitTask()
    {
        if (!isEditing)
        {
            // Add the new task to the current WorkUnit
            workUnit.Tasks.Add(workUnitTask);
        }
        else
        {
            // Update the existing task's details
            var existingTask = workUnit.Tasks.FirstOrDefault(task => task.Id == workUnitTask.Id);
            if (existingTask != null)
            {
                existingTask.Duration = workUnitTask.Duration;
                existingTask.DueDate = workUnitTask.DueDate;
                existingTask.SequenceNumber = workUnitTask.SequenceNumber;
            }
        }

        // Save the work unit changes to the database
        await WorkUnitData.UpdateAsync(workUnit);

        // Clear the form and reset the state
        workUnitTaskToUpdate = null;
        isEditing = false;

        // Close the modal
        await OnClose.InvokeAsync(null);

        // Update UI
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeModal");
        }
    }

    // Close button event should hide the modal and reset the state
    private async Task OnCloseButtonClick()
    {
        await JS.InvokeVoidAsync("modalInterop.hideModal", "form-modal");
        await OnClose.InvokeAsync(null);
    }
}

