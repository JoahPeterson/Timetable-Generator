@using Microsoft.AspNetCore.Authorization
@inject ITaskTypeData TaskTypeData
@inject IUserData UserData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject Blazored.Modal.Services.IModalService Modal
@rendermode InteractiveServer
@attribute [Authorize]



@if (taskTypes != null && loggedInUser != null)
{
    var colorClasses = new List<string> { "Cardcolor-1", "Cardcolor-2" };
    <div class="darkdiv rounded-3 p-3 shadow">
        <h2 class="text-center"><i class="bi bi-tags-fill"></i> My Task Types</h2>
        <hr />
        <div class="card scrollable-card">
            <ul class="list-group list-group-flush">
                @foreach (var (taskType, index) in taskTypes.Select((value, i) => (value, i)))
                {
                    var colorClass = colorClasses.ElementAtOrDefault(index % colorClasses.Count) ?? "Cardcolor-1";  // Ensure safe access
                    <li class="list-group-item CardText text-black px-3 d-flex justify-content-between @colorClass"
                        data-toggle="tooltip" data-placement="top" title="@taskType.Description">
                        <div>
                            <i class="bi bi-clipboard h4"></i>
                            <a href="tasktype/create/@taskType.Id" class="text-decoration-none text-black fw-bold">@taskType.Name</a>
                        </div>
                        <a class="text-decoration-none text-black fw-bold ms-auto" @onclick="() => ShowDeleteConfirmation(taskType)">
                            <i class="bi bi-dash-circle h5"></i>
                        </a>
                    </li>
                }
            </ul>
        </div>
        <div class="mt-4 fixed">
            <a href="tasktype/create" class="text-black text-decoration-none CardText">
                <i class="bi bi-plus-circle h5"></i> Add
            </a>
        </div>
    </div>
}
else
{
    <p>Loading task types...</p>
}

@code {
    private List<TaskType>? taskTypes;
    private User? loggedInUser;
    private bool showConfirmationModal = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the user's ID claim
        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value;

        if (!string.IsNullOrEmpty(userIdClaim))
        {
            loggedInUser = await UserData.GetUserFromAuthenticationAsync(userIdClaim);
            if (loggedInUser != null)
            {
                // Fetch task types for the logged-in user
                taskTypes = await TaskTypeData.GetUsersTaskTypesAsync(loggedInUser.Id);
            }
        }
    }

    private async Task OnConfirmationResult(bool confirmed, TaskType taskType)
    {
        showConfirmationModal = false; // Hide the modal
        if (confirmed)
        {
            await Archive(taskType);
        }
    }

    private async Task Archive(TaskType taskType)
    {

        taskType.AuditInformation.LastModified = DateTime.Now;
        taskType.AuditInformation.IsArchived = true;
        await TaskTypeData.UpdateTaskTypeAsync(taskType);

        if (taskTypes is not null)
            taskTypes.Remove(taskType);

        StateHasChanged();
    }

    private async Task ShowDeleteConfirmation(TaskType taskType)
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", $"Are you sure you want to delete the task type '{taskType.Name}'?");

        var modal = Modal.Show<ConfirmationDialog>("Confirm Delete", parameters);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            await OnConfirmationResult(true, taskType);
            //await Archive(taskType);
        }
        else
        {
            // Nothing right now
        }
    }

}
