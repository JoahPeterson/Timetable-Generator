@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject ICourseData CourseData
@inject IUserData UserData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject DuplicationService DuplicationService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize]

@if (courses != null && loggedInUser != null)
{
    var colorClasses = new List<string> { "Cardcolor-1", "Cardcolor-2" };

    <div class="darkdiv p-3 rounded-3 shadow">
        <h2 class="text-center"><i class="bi bi-table"></i> My Timetables</h2>
        <hr />
        <div class="card scrollable-card">
            <ul class="list-group list-group-flush">
                @foreach (var (course, index) in courses.Select((value, i) => (value, i)))
                {
                    var colorClass = colorClasses.ElementAtOrDefault(index % colorClasses.Count) ?? "Cardcolor-1";  // Ensure safe access
                    <li class="list-group-item CardText text-black px-3 d-flex justify-content-between @colorClass"
                    data-toggle="tooltip" data-placement="top" title="@course.Description">
                        <div>
                            <i class="bi bi-journal-bookmark h4"></i>
                            <a href="/timetable/@course.Id" class="text-black text-decoration-none fw-bold">@course.Name</a>
                        </div>
                        <div class="justify-content-between d-flex gap-3">
                            <a class="text-black text-decoration-none fw-bold ms-auto icon-hover" @onclick="async () => await HandleCourseDuplication(course)">
                                <i class="bi bi-copy"></i>
                            </a>
                            <a class="text-black text-decoration-none fw-bold ms-auto icon-hover" @onclick="() => ShowModal(course)">
                                <i class="bi bi-dash-circle h5"></i>
                            </a>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div class="mt-4 d-flex justify-content-between">
            <a href="course/create" class="text-black text-decoration-none CardText">
                <i class="bi bi-plus-circle h5"></i> Add
            </a>

            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" MaximumFileCount="1" Accept=".xlsx">
                <ActivatorContent>
                    <MudButton  Class="py-0" Variant="Variant.Text"
                    Color="Color.Default"
                    StartIcon="@Icons.Material.Filled.CloudUpload">
                        Import
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </div>
    </div>
}
else
{
    <p>Loading courses...</p>
}

@if(isProcessing)
{
    <div class="progress-container">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </div>
} 

@code {
    private List<Course>? courses;
    private User? loggedInUser;
    private bool isProcessing = false;
    Course selectedCourse = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value;

        if (!string.IsNullOrEmpty(userIdClaim))
        {
            loggedInUser = await UserData.GetUserFromAuthenticationAsync(userIdClaim);

            if (loggedInUser != null)
            {
                courses = await CourseData.GetUsersCoursesAsync(loggedInUser.Id);
            }
        }
    }

    private async Task Archive(Course course)
    {
        course.AuditInformation.LastModified = DateTime.Now;
        course.AuditInformation.IsArchived = true;
        await CourseData.UpdateCourseAsync(course);

        if (courses is not null)
            courses.Remove(course);
    }

    private async Task HandleCourseDuplication(Course course)
    {
        isProcessing = true;
        Snackbar.Add("Copy course in progress", Severity.Info);
        Course newCourse = await DuplicationService.DuplicateCourseAsync(course);

        courses.Add(newCourse);
        Snackbar.Add("Successfully Copied Course", Severity.Success);
        isProcessing = false;
    }

    private async Task CallImportEndpoint(IBrowserFile selectedFile)
    {
        if (selectedFile == null)
        {
            Snackbar.Add("No file selected for upload.", Severity.Error);
            return;
        }

        try
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);
            var userId = mongoUser.Id;

            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("Unable to retrieve user ID.", Severity.Error);
                return;
            }

            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // Limit to 10 MB
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);

            content.Add(fileContent, "file", selectedFile.Name);

            // Add X-User-Id header
            Http.DefaultRequestHeaders.Remove("X-User-Id");
            Http.DefaultRequestHeaders.Add("X-User-Id", userId);

            var response = await Http.PostAsync("api/ExcelExport/import", content);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("File uploaded successfully!", Severity.Success);
                Navigation.NavigateTo("/dashboard", forceLoad: true);
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Upload failed: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An unexpected error occurred: {ex.Message}", Severity.Error);
        }

    }


    private async Task ShowModal(Course course)
    {
        var parameters = new DialogParameters<Confimation_Dialog>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = DialogService.Show<Confimation_Dialog>("Delete", parameters, options);

        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            await Archive(course);
            Snackbar.Add("Timetable Deleted", Severity.Success);
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        isProcessing = true;
        Snackbar.Add("Processing Import", Severity.Normal);

        await CallImportEndpoint(file);
        isProcessing = false;
    }
}

