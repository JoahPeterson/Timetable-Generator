@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IWorkTaskData WorkTaskData
@inject IUserData UserData
@inject ITaskTypeData TaskTypeData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject Blazored.Modal.Services.IModalService Modal
@rendermode InteractiveServer
@attribute [Authorize]

<EditForm Model="workTask" OnValidSubmit="@SaveWorkTask">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="w-75">
        <label class="form-label" for="Name">Work Task Name:</label>
        <InputText id="name" @bind-Value="workTask.Name" class="form-control" />
        <ValidationMessage For="@(() => workTask.Name)" />
    </div>
    <div class="w-75">
        <label class="form-label" for="description">Description:</label>
        <InputTextArea id="description" @bind-Value="workTask.Description" class="form-control" />
        <ValidationMessage For="@(() => workTask.Description)" />
    </div>
    <div class="w-75">
        <label class="form-label" for="type">Type ID:</label>
        <InputSelect id="type" @bind-Value="workTask.TypeId" class="form-control">
            @foreach (var type in taskTypes)
            {
                if(type.AuditInformation.IsArchived == false)
                {
                    <option value="@type.Id">@type.Name</option>
                }
                
            }
        </InputSelect>
        <ValidationMessage For="@(() => workTask.TypeId)" />
    </div>
    
    <div class="d-flex flex-row mt-3 justify-content-end w-75">
        <div class="d-block m-1">
            <button type="reset" class="btn btn-secondary d-block mt-1" @onclick="HandleReset">Reset</button>
        </div>
        <div class="d-block m-1">
            <button type="submit" class="btn btn-primary d-block mt-1">Save</button>
        </div>
    </div>
</EditForm>

@if (workTasks != null && loggedInUser != null)
{
    <div class="bg-light p-3">
        <div class="card scrollable-card">
            <ul class="list-group list-group-flush">
            @for (int i = 0; i < workTasks.Count; i++)
            {
                if(workTasks[i].AuditInformation.IsArchived == false)
                {
                    <li class="list-group-item CardText text-dark px-3"  
                        data-toggle="tooltip" data-placement="top" title="@workTasks[i].Description">
                        <i class="bi bi-clipboard h4"></i> 
                        @workTasks[i].Name
                    </li>
                }
            }
            </ul>
        </div>
    </div>
}
else
{
    <p>Loading work tasks...</p>
}

@code {
    [Parameter]
    public EventCallback<WorkTask> OnWorkTaskFormSubmit { get; set; } 
    private List<WorkTask>? workTasks;
    private User? loggedInUser;
    private WorkTask workTask = new WorkTask();

    private List<TaskType> taskTypes = new List<TaskType>();

    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the user's ID claim
        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value;

        if (!string.IsNullOrEmpty(userIdClaim))
        {
            loggedInUser = await UserData.GetUserFromAuthenticationAsync(userIdClaim);

            if (loggedInUser != null)
            {
                // Fetch tasktypes from the database
                taskTypes = await TaskTypeData.GetUsersTaskTypesAsync(loggedInUser.Id);
                workTasks = await WorkTaskData.GetUsersWorkTasksAsync(loggedInUser.Id);
            }
        }
    }

    private async Task SaveWorkTask()
    {
        if (isEditMode)
        {
            workTask.AuditInformation.LastModified = DateTime.Now;
            await WorkTaskData.UpdateAsync(workTask);
            await UpdateWorkTaskList();
            isEditMode = false;
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            WorkTask newWorkTask = new WorkTask
            {
                Id = Guid.NewGuid().ToString(),
                Name = workTask.Name,
                Description = workTask.Description,
                TypeId = workTask.TypeId,
                AuditInformation = new Auditable
                {
                    CreatedById = mongoUser.Id
                }
            };

            await WorkTaskData.CreateAsync(newWorkTask);
            await UpdateWorkTaskList();

        }
    }

    private async Task UpdateWorkTaskList()
    {
        workTasks = await WorkTaskData.GetAsync();
    }

    private void HandleReset()
    {
        workTask = new WorkTask();

    }
}
