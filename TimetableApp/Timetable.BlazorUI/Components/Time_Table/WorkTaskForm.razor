@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IWorkTaskData WorkTaskData
@inject IUserData UserData
@inject ITaskTypeData TaskTypeData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer
@attribute [Authorize]

<!-- Toggle Button for the collapsible Work Task form -->
<button class="btn mstc-gold-btn shadow mb-2 mt-2" id="toggleTaskBtn" type="button" data-bs-toggle="collapse" data-bs-target="#workTaskCollapse" aria-expanded="false" aria-controls="workTaskCollapse">
    <i class="bi bi-eye"></i> Task Form
</button>

<!-- Collapsible form -->
<div class="collapse" id="workTaskCollapse">
    <div class="card card-body bg-light shadow">
        <EditForm FormName="WorkTaskForm" Model="workTask" OnValidSubmit="@SaveWorkTask" class="form-inline">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Inline Form Fields -->
            <div class="form-group mx-sm-3 mb-2">
                <label class="fw-bold" for="Name">Name</label>
                <InputText id="name" @bind-Value="workTask.Name" class="form-control" placeholder="Task Name" />
                <ValidationMessage For="@(() => workTask.Name)" />
            </div>

            <div class="form-group mx-sm-3 mb-2">
                <label class="fw-bold" for="description">Description</label>
                <InputTextArea id="description" @bind-Value="workTask.Description" class="form-control" placeholder="Task Description" />
                <ValidationMessage For="@(() => workTask.Description)" />
            </div>

            <div class="form-group mx-sm-3 mb-2">
                <label class="fw-bold" for="type">Type</label>
                <InputSelect id="type" @bind-Value="workTask.TypeId" class="form-control">
                    @foreach (var type in taskTypes)
                    {
                        if (type.AuditInformation.IsArchived == false)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => workTask.TypeId)" />
            </div>

            <!-- Inline Buttons -->
            <div class="d-flex flex-row mt-3 justify-content-start w-75 mx-3">
                <div class="d-block m-1">
                    <button type="reset" class="btn btn-secondary d-block mt-1"><i class="bi bi-arrow-counterclockwise"></i> Reset</button>
                </div>
                <div class="d-block m-1">
                    <button type="submit" class="btn mstc-gold-btn d-block mt-1"><i class="bi bi-floppy"></i> Save</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>


@if (workTasks != null && loggedInUser != null)
{
     <div class="bg-light p-3 border border-1 rounded-3 mt-2 shadow">
         <h4 class="text-center">My Tasks</h4>
        <div class="card scrollable-card">
            <ul class="list-group list-group-flush">
                @foreach (var task in workTasks)
                {
                    if (task != null && !task.AuditInformation.IsArchived)
                    {
                        <li class="list-group-item CardText text-dark px-3"
                            draggable="true"
                            @ondragstart="(e) => HandleDragStart(e, task.Id)"
                            data-toggle="tooltip" data-placement="top" title="@task.Description">
                            <i class="bi bi-clipboard h4"></i>
                            @task.Name
                        </li>
                    }
                }
            </ul>
        </div>
    </div>

}


@code {
    [Parameter]
    public EventCallback<WorkTask> OnWorkTaskFormSubmit { get; set; } 

    [Parameter]
    public WorkTask? WorkTaskToEdit{ get; set; }

    private List<WorkTask>? workTasks;

    private User? loggedInUser;

    private WorkTask workTask = new WorkTask();

    private List<TaskType> taskTypes = new List<TaskType>();

    private bool isEditMode = false;

    //Draggable Code

    private string? draggedTaskId;

    private async Task HandleDragStart(DragEventArgs e, string taskId)
    {
        try
        {
            draggedTaskId = taskId;
            await JS.InvokeVoidAsync("SetSession", "TaskId", taskId);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }


    protected override void OnParametersSet()
    {
        if (WorkTaskToEdit != null)
        {
            workTask = WorkTaskToEdit;
            isEditMode = true;
            return;
        }
        workTask = new WorkTask();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the user's ID claim
        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value;

        if (!string.IsNullOrEmpty(userIdClaim))
        {
            loggedInUser = await UserData.GetUserFromAuthenticationAsync(userIdClaim);

            if (loggedInUser != null)
            {
                // Fetch user's tasktypes from the database
                taskTypes = await TaskTypeData.GetUsersTaskTypesAsync(loggedInUser.Id);

                // Fetch user's worktasks from the database
                workTasks = await WorkTaskData.GetUsersWorkTasksAsync(loggedInUser.Id);
            }
        }
    }

    private async Task SaveWorkTask()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

        if (isEditMode)
        {
            workTask.AuditInformation.LastModified = DateTime.Now;
            await WorkTaskData.UpdateAsync(workTask);
            await UpdateWorkTaskList(mongoUser.Id);
            isEditMode = false;
        }
        else
        {
            // Instantiate a new Work Task object 
            WorkTask newWorkTask = new WorkTask
            {
                Id = Guid.NewGuid().ToString(),
                Name = workTask.Name,
                Description = workTask.Description,
                TypeId = workTask.TypeId,
                AuditInformation = new Auditable
                {
                    CreatedById = mongoUser.Id
                }
            };

            // Create the new Work Task 
            await WorkTaskData.CreateAsync(newWorkTask);

            // Make the list current
            await UpdateWorkTaskList(mongoUser.Id);

        }
    }


    /// <summary>
    /// Updates the list of work tasks to be current
    /// </summary>
    /// <returns></returns>
    private async Task UpdateWorkTaskList(string mongoUserId)
    {
        List<WorkTask> tempWorkTasks = await WorkTaskData.GetAsync();
        workTasks = tempWorkTasks.Where(tempTask => tempTask.AuditInformation.CreatedById == mongoUserId).ToList();
    }


    private void HandleReset()
    {
        workTask = new WorkTask();

    }
}
