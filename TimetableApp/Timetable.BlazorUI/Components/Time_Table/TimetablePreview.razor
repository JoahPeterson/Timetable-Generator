@page "/timetable/preview/{courseId}"
@inject IJSRuntime JS
@inject HttpClient Http
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject ICourseData CourseData

<div class="timetable-main">
    <div class="d-flex justify-content-between">
        <div> <TimetablePreviewHeader /></div>
        <div class="d-print-none"><button onclick="window.print();" class="btn mstc-gold-btn px-3"><i class="bi bi-printer"></i> Print</button></div>
            
        <div class="d-print-none">
            <button @onclick="HandleExcelButtonClicked" class="btn mstc-gold-btn px-3">
                <i class="bi bi-printer"></i> Excel
            </button>
        </div>
    </div>
   
    <div class="preview-course-name bg-red  row d-flex justify-content-center align-items-center flex-column course-name">
        @course.Name
    </div>
    @{
        int currentWeek = 1;
        for (int i = 0; i < course.WorkUnits.Count; i++)
        {
            <TimetablePreviewWorkUnit CourseDuration="course.Term.Duration" WorkUnit="course.WorkUnits[i]" WeekNumber="currentWeek"CourseStartDate="course.StartDate" />
            currentWeek += course.WorkUnits[i].Duration;
        }
    }
</div>

@code {
    [Parameter]
    public required string CourseId { get; set; }
    private Course course = new Course();

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(CourseId))
        {
            course = await CourseData.GetCourseAsync(CourseId)!;
        }
    }

    private async void HandleExcelButtonClicked()
    {
        try
        {
            //isExporting = true;
            //await OnExportStarted.InvokeAsync();

            // Ensure the method is `async Task` and call `await` properly
            var response = await Http.PostAsJsonAsync("api/ExcelExport/export", course);


            if (response.IsSuccessStatusCode)
            {
                var fileStream = await response.Content.ReadAsStreamAsync();
                var fileName = $"TimeTable_{DateTime.Now:yyyyMMddHHmmss}.xlsx";

                // Create download using JS Interop
                using var streamRef = new DotNetStreamReference(stream: fileStream);
                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

                //await OnExportCompleted.InvokeAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                //await OnError.InvokeAsync($"Export failed: {error}");
            }
        }
        catch (Exception ex)
        {
            //await OnError.InvokeAsync($"Export failed: {ex.Message}");
        }
        finally
        {
            //isExporting = false;
        }
    }
}