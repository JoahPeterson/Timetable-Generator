@using TimetableApp.DataModels.Models
@using Microsoft.AspNetCore.Http
@using Timetable.BlazorUI.Components.Components
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JS
@inject IWorkUnitData WorkUnitData
@inject IWorkUnitTaskData WorkUnitTaskData
@inject IWorkTaskData WorkTaskData
@inject IUserData UserData
@inject AuthenticationStateProvider authProvider

@* <div class="work-unit bg-success text-white border border-dark" draggable="true" @onclick="SelectWorkUnit" style="height: @(RowHeightPercentage)vh">
    <p>@WorkUnit.Name</p>
    <p>Duration: @WorkUnit.Duration</p>
</div>
 *@
@*   *@
 <!-- Droppable Version for Drag n Drop-->
 <div class="work-unit bg-success text-white border border-dark" 
    ondragover="event.preventDefault();"
     @onclick="SelectWorkUnit" 
     @ondrop="(e) => HandleDrop(e, WorkUnit.Id)"
     style="height: @(RowHeightPercentage)vh">
    <p>@WorkUnit.Name</p>
    <p>Duration: @WorkUnit.Duration</p>
    <ul>
        @foreach (var workUnitTask in WorkUnit.Tasks)
        {
            <li class="list-group-item CardText text-dark px-3"
                draggable="true"
                @ondragstart="(e) => HandleDragStart(e, workUnitTask.Id, workUnitTask.TaskId)">
                @workUnitTask.TaskId
                <i @onclick="() => SelectWorkUnitTask(workUnitTask)" class="bi bi-pencil"></i>
            </li>
        }
    </ul>
   

</div>

<WorkUnitTaskForm OnClose="OnClose" @ref="workUnitTaskForm" currentWorkUnit="WorkUnit" />

@code {
    [Parameter]
    public WorkUnit WorkUnit { get; set; }

    [Parameter]
    public double SingleRowHeightPercentage { get; set; }

    [Parameter]
    public EventCallback<WorkUnit> OnSelected { get; set; }

    private List<WorkUnitTask> tasks;

    private User? loggedInUser;

    private string? draggedTaskId;

    private string? workTaskId;

    private WorkUnitTaskForm workUnitTaskForm;

    private double RowHeightPercentage { get => SingleRowHeightPercentage * WorkUnit.Duration; }

    private async Task SelectWorkUnit()
    {
        await OnSelected.InvokeAsync(WorkUnit);
    }

    private async Task SelectWorkUnitTask(WorkUnitTask workUnitTask)
    {
        workUnitTaskForm.workUnitTaskToUpdate = workUnitTask;
        workUnitTaskForm.currentWorkUnit = WorkUnit;
        await JS.InvokeVoidAsync("modalInterop.showModal", "form-modal");
    }

    private async Task HandleDrop(DragEventArgs e, string workUnitId)
    {
        //draggedTaskId = httpContextAccessor.HttpContext.Session.GetString("taskID");
        draggedTaskId = await JS.InvokeAsync<string>("GetSession", "TaskId");
        workTaskId = await JS.InvokeAsync<string>("GetSession", "WorkTaskId");

        if (!string.IsNullOrEmpty(draggedTaskId))
        {

            // Add task to this WorkUnit's task list if workunit task doesn't already exist in the list
            if (WorkUnit.Tasks.Any(t => t.Id == draggedTaskId))
            {
                return;
            }

            // Get the task by ID and assign it to this work unit
            var task = await WorkTaskData.GetByIdAsync(draggedTaskId);

            if (task == null)
            {
                task = await WorkTaskData.GetByIdAsync(workTaskId);
            }
            if (task != null)
            {
                // var newWorkUnitTask = new WorkUnitTask
                //     {
                //         Id = Guid.NewGuid().ToString(),
                //         TaskId = task.Id,
                //         WorkUnitId = WorkUnit.Id
                //     };

                // WorkUnit.Tasks.Add(newWorkUnitTask);

                // Save the updated work unit
                // await WorkUnitData.UpdateAsync(WorkUnit);

                // workUnitTaskForm.workUnitTaskId = newWorkUnitTask.Id;
                // workUnitTaskForm.currentWorkUnit = WorkUnit;

                workUnitTaskForm.workTask = task;
                workUnitTaskForm.currentWorkUnit = WorkUnit;

                await JS.InvokeVoidAsync("modalInterop.showModal", "form-modal");

                // Refresh the UI
                // StateHasChanged();
            }
        }
    }

    private async Task HandleDragStart(DragEventArgs e, string taskId, string workTaskId)
    {
        await JS.InvokeVoidAsync("SetSession", "TaskId", taskId);
        await JS.InvokeVoidAsync("SetSession", "WorkTaskId", workTaskId);
        WorkUnit.Tasks.Remove(WorkUnit.Tasks.Where(t => t.Id == taskId).First());
    }
 
    private async Task OnClose()
    {
        await JS.InvokeVoidAsync("modalInterop.hideModal", "form-modal");

    }
}