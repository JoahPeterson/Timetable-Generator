@using TimetableApp.DataModels.Models
@inject IJSRuntime JS
@inject IWorkUnitData WorkUnitData
@inject IWorkTaskData WorkTaskData

@* <div class="work-unit bg-success text-white border border-dark" draggable="true" @onclick="SelectWorkUnit" style="height: @(RowHeightPercentage)vh">
    <p>@WorkUnit.Name</p>
    <p>Duration: @WorkUnit.Duration</p>
</div>
 *@

 <!-- Droppable Version for Drag n Drop-->
 <div class="work-unit bg-success text-white border border-dark" 
     draggable="true" 
     @onclick="SelectWorkUnit" 
     @ondragover="HandleDragOver" 
     @ondrop="(e) => HandleDrop(e, WorkUnit.Id)" 
     style="height: @(RowHeightPercentage)vh">
    <p>@WorkUnit.Name</p>
    <p>Duration: @WorkUnit.Duration</p>
</div>

@code {
    [Parameter]
    public WorkUnit WorkUnit { get; set; }

    [Parameter]
    public double SingleRowHeightPercentage { get; set; }

    [Parameter]
    public EventCallback<WorkUnit> OnSelected { get; set; }

     private string? draggedTaskId;

    private double RowHeightPercentage { get => SingleRowHeightPercentage * WorkUnit.Duration; }

    private async Task SelectWorkUnit()
    {
        await OnSelected.InvokeAsync(WorkUnit);
    }

     private async Task HandleDragOver(DragEventArgs e)
     {
        // Prevent default behavior to allow drop
        await JS.InvokeVoidAsync("preventDefault", e);
     }

     private async Task HandleDrop(DragEventArgs e, string workUnitId)
    {
        if (!string.IsNullOrEmpty(draggedTaskId))
        {
            // Get the task by ID and assign it to this work unit
            var task = await WorkTaskData.GetByIdAsync(draggedTaskId);
            if (task != null)
            {
                // Add task to this WorkUnit's task list
                WorkUnit.Tasks.Add(new WorkUnitTask
                {
                    Id = task.Id,
                    WorkUnitId = WorkUnit.Id
                });

                // Save the updated work unit
                await WorkUnitData.UpdateAsync(WorkUnit);

                // Refresh the UI
                StateHasChanged();
            }
        }
    }

    private void HandleDragStart(DragEventArgs e, string taskId)
    {
        draggedTaskId = taskId;
    }
 

}