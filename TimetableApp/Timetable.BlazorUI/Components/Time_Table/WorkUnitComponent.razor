@using TimetableApp.DataModels.Models
@using Microsoft.AspNetCore.Http
@inject IDialogService DialogService
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JS
@inject IWorkUnitData WorkUnitData
@inject IWorkUnitTaskData WorkUnitTaskData
@inject IWorkTaskData WorkTaskData
@inject ICourseData CourseData
@inject IUserData UserData
@inject AuthenticationStateProvider authProvider

 <!-- Droppable Version for Drag n Drop-->
<div class="work-unit border border-dark"
     ondragover="event.preventDefault();"
     @onclick="SelectWorkUnit" 
     @ondrop="(e) => HandleDrop(e, WorkUnit.Id)"
     style="height: @(RowHeightPercentage)vh">
    <div class="d-flex justify-content-between align-items-start">
        <div class="TimeTableHeader">
            <TimetableWorkUnitHeader WorkUnit="@WorkUnit" />
        </div>
        <div class="cards-container flex-grow-1">
            @if (WorkUnit.Tasks.Any())
            {
                @foreach (var task in WorkUnit.Tasks.OrderBy(t => t.DueDate))
                {
                    var workTask = WorkTasks.FirstOrDefault(t => t.Id == task.TaskId);
                    <div class="card mstc-gold-btn border border-dark m-2 rounded-1"
                         draggable="true"
                         @ondragstart="(e) => HandleDragStart(e, task.Id, task.TaskId)">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="card-title ">@workTask?.Name</div>
                                <div class="p-0 text-decoration-none" @onclick="() => WorkUnitTaskEditOnClick(task)">
                                    <i class="bi bi-pencil-square icon-hover"></i>
                                </div>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <p class="m-0">(min): @task.Duration </p>
                                <p class="m-0">(date): @task.DueDate?.ToString("MM/dd") </p>
                            </div>
                            
                        </div>
                    </div>
                }
            }
        </div>

    </div>
</div>

@code {
    [Parameter]
    public required WorkUnit WorkUnit { get; set; }

    [Parameter]
    public required List<WorkTask> WorkTasks { get; set; }

    [Parameter]
    public double SingleRowHeightPercentage { get; set; }

    [Parameter]
    public EventCallback<WorkUnit> OnSelected { get; set; }

    [Parameter]
    public EventCallback OnWorkUnitTaskMoved { get; set; }

    [Parameter]
    public Course Course { get; set; }

    private List<WorkUnitTask>? tasks;

    private User? loggedInUser;

    private string? draggedTaskId;

    private string? workTaskId;

    private string? previousWorkUnitId;

    private double RowHeightPercentage { get => SingleRowHeightPercentage * WorkUnit.Duration; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the user's ID claim
        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value;

        if (!string.IsNullOrEmpty(userIdClaim))
        {
            loggedInUser = await UserData.GetUserFromAuthenticationAsync(userIdClaim);

            if (loggedInUser != null)
            {
                tasks = await WorkUnitTaskData.GetUsersWorkUnitTasksAsync(loggedInUser.Id);
            }
        }
    }

    private async Task SelectWorkUnit()
    {
        await OnSelected.InvokeAsync(WorkUnit);
    }

    private async Task HandleDrop(DragEventArgs e, string workUnitId)
    {
        // Hide Trash Bin
        await JS.InvokeVoidAsync("HideElement", "trash-bin");

        draggedTaskId = await JS.InvokeAsync<string>("GetSession", "TaskId");
        workTaskId = await JS.InvokeAsync<string>("GetSession", "WorkTaskId");
        previousWorkUnitId = await JS.InvokeAsync<string>("GetSession", "WorkUnitId");

        if (!string.IsNullOrEmpty(draggedTaskId))
        {

            // Add task to this WorkUnit's task list if workunit task doesn't already exist in the list
            if (WorkUnit.Tasks.Any(t => t.Id == draggedTaskId))
            {
                return;
            }

            // Get the task by ID and assign it to this work unit
            var task = await WorkTaskData.GetByIdAsync(draggedTaskId);

            if (task == null)
            {
                task = await WorkTaskData.GetByIdAsync(workTaskId);
            }
            if (task != null)
            {
                WorkUnitTask workUnitTask = new WorkUnitTask
                {
                    Id = Guid.NewGuid().ToString(),
                    TaskId = task.Id,
                    WorkUnitId = WorkUnit.Id
                };

                DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
                var parameters = new DialogParameters<WorkUnitTaskDialog> { { x => x.workUnitTask, workUnitTask }, { x => x.workUnit, WorkUnit } };

                var dialog = await DialogService.ShowAsync<WorkUnitTaskDialog>("Delete Server", parameters, _maxWidth);
                var result = await dialog.Result;

                if (result.Canceled)
                    return;

                if (result.Data == null)
                    return;

                // Find Prevoius WorkUnit From ID
                WorkUnit previousWorkUnit = Course.WorkUnits.FirstOrDefault(c => c.Id == previousWorkUnitId);

                if (previousWorkUnit != null && draggedTaskId != null)
                {
                    // Remove the dragged task from the WorkUnit
                    previousWorkUnit.Tasks.Remove(previousWorkUnit.Tasks.FirstOrDefault(t => t.Id == draggedTaskId));

                    // Update the Previous WorkUnit
                    await WorkUnitData.UpdateAsync(previousWorkUnit);

                    await OnWorkUnitTaskMoved.InvokeAsync();
                }

                // Add the WorkUnitTask to the WorkUnit It was Dragged into
                WorkUnit.Tasks.Add((WorkUnitTask)result.Data);

                // Save the updated work unit
                await WorkUnitData.UpdateAsync(WorkUnit);

                // Set the WorkUnitId back to string.empty
                await JS.InvokeVoidAsync("SetSession", "WorkUnitId", string.Empty);
                // Refresh the UI
                StateHasChanged();
            }
        }
    }

    private async Task HandleDragStart(DragEventArgs e, string taskId, string workTaskId)
    {
        try
        {
            e.DataTransfer.Items.SetValue(taskId, 0);
        }
        catch (Exception ex)
        {

        }
        await JS.InvokeVoidAsync("SetSession", "TaskId", taskId);
        await JS.InvokeVoidAsync("SetSession", "WorkTaskId", workTaskId);
        await JS.InvokeVoidAsync("SetSession", "WorkUnitId", WorkUnit.Id);
        await JS.InvokeVoidAsync("toggleCollapse", "workUnitCollapse");
        await JS.InvokeVoidAsync("toggleCollapse", "workTaskCollapse");
        await JS.InvokeVoidAsync("ShowElement", "trash-bin");
    }
    private async Task WorkUnitTaskEditOnClick(WorkUnitTask workUnitTask)
    {
        DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true };
        var parameters = new DialogParameters<WorkUnitTaskDialog> { { x => x.workUnitTask, workUnitTask }, {x => x.workUnit, WorkUnit} };

        var dialog = await DialogService.ShowAsync<WorkUnitTaskDialog>("Edit Task", parameters, _maxWidth);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        if (result.Data == null)
            return;

        var existingTask = WorkUnit.Tasks.FirstOrDefault(t => t.Id == workUnitTask.Id);

        if (existingTask != null)
        {
            // Update the properties of the existing task
            existingTask.DueDate = ((WorkUnitTask)result.Data).DueDate;
            existingTask.Duration = ((WorkUnitTask)result.Data).Duration;
        }

        await WorkUnitData.UpdateAsync(WorkUnit);
    }
}