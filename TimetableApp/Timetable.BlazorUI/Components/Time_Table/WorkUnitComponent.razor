@using TimetableApp.DataModels.Models
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JS
@inject IWorkUnitData WorkUnitData
@inject IWorkUnitTaskData WorkUnitTaskData
@inject IWorkTaskData WorkTaskData
@inject IUserData UserData
@inject AuthenticationStateProvider authProvider

 <!-- Droppable Version for Drag n Drop-->
 <div class="work-unit bg-success text-white border border-dark" 
    ondragover="event.preventDefault();"
     @onclick="SelectWorkUnit" 
     @ondrop="(e) => HandleDrop(e, WorkUnit.Id)"
     style="height: @(RowHeightPercentage)vh">
    <div class="row">
            <TimetableWorkUnitHeader WorkUnit="@WorkUnit"/>
        <ul>
            @foreach (var task in WorkUnit.Tasks)
            {
                var workTask = WorkTasks.FirstOrDefault(t => t.Id == task.TaskId);

                <li class="list-group-item CardText text-dark px-3"
                    draggable="true"
                    @ondragstart="(e) => HandleDragStart(e, task.TaskId, task.TaskId)">
                    @workTask.Name;
                </li>
            }
        </ul>
    </div>

   

</div>

@code {
    [Parameter]
    public required WorkUnit WorkUnit { get; set; }


    [Parameter]
    public required List<WorkTask> WorkTasks { get; set; }

    [Parameter]
    public double SingleRowHeightPercentage { get; set; }

    [Parameter]
    public EventCallback<WorkUnit> OnSelected { get; set; }

    private List<WorkUnitTask>? tasks;

    private User? loggedInUser;

    private string? draggedTaskId;

    private string? workTaskId;

    private double RowHeightPercentage { get => SingleRowHeightPercentage * WorkUnit.Duration; }

    protected override async Task OnInitializedAsync()
    {

        var authState = await authProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Get the user's ID claim
        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value;

        if (!string.IsNullOrEmpty(userIdClaim))
        {
            loggedInUser = await UserData.GetUserFromAuthenticationAsync(userIdClaim);

            if (loggedInUser != null)
            {
                //workTasks = await WorkTaskData.GetUsersWorkTasksAsync(loggedInUser.Id);
                // tasks = await WorkUnitTaskData.GetUsersWorkUnitTasksAsync(loggedInUser.Id);
            }
        }
    }

    private async Task SelectWorkUnit()
    {
        await OnSelected.InvokeAsync(WorkUnit);
    }

    private async Task HandleDragOver(DragEventArgs e)
    {
        // Prevent default behavior to allow drop
        //await JS.InvokeVoidAsync("preventDefault", e);
    }

    private async Task Drop()
    {

    }

    private async Task HandleDrop(DragEventArgs e, string workUnitId)
    {
        //draggedTaskId = httpContextAccessor.HttpContext.Session.GetString("taskID");
        draggedTaskId = await JS.InvokeAsync<string>("GetSession", "TaskId");
        workTaskId = await JS.InvokeAsync<string>("GetSession", "WorkTaskId");

        if (!string.IsNullOrEmpty(draggedTaskId))
        {

            // Add task to this WorkUnit's task list if workunit task doesn't already exist in the list
            if (WorkUnit.Tasks.Any(t => t.Id == draggedTaskId))
            {
                return;
            }

            // Get the task by ID and assign it to this work unit
            var task = await WorkTaskData.GetByIdAsync(draggedTaskId);

            if (task == null)
            {
                task = await WorkTaskData.GetByIdAsync(workTaskId);
            }
            if (task != null)
            {


                WorkUnit.Tasks.Add(new WorkUnitTask
                    {
                        Id = Guid.NewGuid().ToString(),
                        TaskId = task.Id,
                        WorkUnitId = WorkUnit.Id
                    });
                // Save the updated work unit
                await WorkUnitData.UpdateAsync(WorkUnit);

                //await JS.InvokeVoidAsync("modalInterop.showModal", "modal-1");

                // Refresh the UI
                StateHasChanged();
            }
        }
    }

    private async Task HandleDragStart(DragEventArgs e, string taskId, string workTaskId)
    {
        await JS.InvokeVoidAsync("SetSession", "TaskId", taskId);
        await JS.InvokeVoidAsync("SetSession", "WorkTaskId", workTaskId);
        WorkUnit.Tasks.Remove(WorkUnit.Tasks.Where(t => t.Id == taskId).First());
    }
 
    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await JS.InvokeVoidAsync("initializeModal");
    //     }
    // }
}