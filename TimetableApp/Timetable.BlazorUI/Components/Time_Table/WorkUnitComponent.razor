@using TimetableApp.DataModels.Models
@using Microsoft.AspNetCore.Http
@using Timetable.BlazorUI.Components.Components
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime JS
@inject IWorkUnitData WorkUnitData
@inject IWorkUnitTaskData WorkUnitTaskData
@inject IWorkTaskData WorkTaskData
@inject IUserData UserData
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer 

 <!-- Droppable Version for Drag n Drop-->
 <div class="work-unit bg-success text-white border border-dark" 
    ondragover="event.preventDefault();"
     @onclick="SelectWorkUnit" 
     @ondrop="(e) => HandleDrop(e, WorkUnit.Id)"
     style="height: @(RowHeightPercentage)vh">
    <p>@WorkUnit.Name</p>
    <p>Duration: @WorkUnit.Duration</p>
    <ul>
        @foreach (var workUnitTask in WorkUnit.Tasks)
        {
            <li class="list-group-item CardText text-dark px-3"
                draggable="true"
                @ondragstart="(e) => HandleDragStart(e, workUnitTask.Id, workUnitTask.TaskId, WorkUnit.Id)">
                @workUnitTask.TaskId + @workUnitTask.SequenceNumber
                <i @onclick="() => SelectWorkUnitTask(workUnitTask)" class="bi bi-pencil"></i>
            </li>
        }
    </ul>
   

</div>

<WorkUnitTaskForm OnClose="OnClose" @ref="workUnitTaskForm" currentWorkUnit="WorkUnit" />

@code {
    [Parameter]
    public WorkUnit WorkUnit { get; set; }

    [Parameter]
    public double SingleRowHeightPercentage { get; set; }

    [Parameter]
    public EventCallback<WorkUnit> OnSelected { get; set; }

    private List<WorkUnitTask> tasks;

    private User? loggedInUser;

    private string? draggedTaskId;

    private string? workTaskId;

    private WorkUnitTaskForm workUnitTaskForm;

    private WorkUnitTask? selectedWorkUnitTask = new WorkUnitTask(); // To store the ID of the selected work unit task

    private bool ShowModal;

    private bool isModalVisible = false; // Controls modal visibility

    private double RowHeightPercentage { get => SingleRowHeightPercentage * WorkUnit.Duration; }

    private async Task SelectWorkUnit()
    {
        await OnSelected.InvokeAsync(WorkUnit);
    }

    private async Task SelectWorkUnitTask(WorkUnitTask workUnitTask)
    {
        selectedWorkUnitTask = workUnitTask;

        if (selectedWorkUnitTask != null)
        {

            await OnShow();

        }


    }

    private async Task HandleDrop(DragEventArgs e, string workUnitId)
    {
        draggedTaskId = await JS.InvokeAsync<string>("GetSession", "TaskId");
        workTaskId = await JS.InvokeAsync<string>("GetSession", "WorkTaskId");

        if (!string.IsNullOrEmpty(draggedTaskId))
        {

            // Add task to this WorkUnit's task list if workunit task doesn't already exist in the list
            if (WorkUnit.Tasks.Any(t => t.Id == draggedTaskId))
            {
                return;
            }

            // Get the task by ID and assign it to this work unit
            var task = await WorkTaskData.GetByIdAsync(draggedTaskId);

            if(task != null)
            {
                workUnitTaskForm.workTask = task;
                workUnitTaskForm.currentWorkUnit = WorkUnit;

                await JS.InvokeVoidAsync("SetSession", "WorkUnitId", workUnitId);
                await JS.InvokeVoidAsync("modalInterop.showModal", "form-modal");

                return;
            }

            string previousWorkUnitId = await JS.InvokeAsync<string>("GetSession", "WorkUnitId");

            WorkUnit previousWorkUnit = await WorkUnitData.GetByIdAsync(previousWorkUnitId);

            if(previousWorkUnit != null)
            {
                WorkUnitTask previousWorkUnitTask = previousWorkUnit.Tasks.Where(t => t.Id == draggedTaskId).FirstOrDefault();

                if (previousWorkUnitTask != null)
                {
                    previousWorkUnit.Tasks.Remove(previousWorkUnitTask);
                    await WorkUnitData.UpdateAsync(previousWorkUnit);
                    WorkUnit workUnitToDropInto = await WorkUnitData.GetByIdAsync(workUnitId);
                    workUnitToDropInto.Tasks.Add(previousWorkUnitTask);
                    await WorkUnitData.UpdateAsync(workUnitToDropInto);
                }

            }
        }
    }

    private async Task HandleDragStart(DragEventArgs e, string taskId, string workTaskId, string workUnitId)
    {
        await JS.InvokeVoidAsync("SetSession", "TaskId", taskId);
        await JS.InvokeVoidAsync("SetSession", "WorkTaskId", workTaskId);
        await JS.InvokeVoidAsync("SetSession", "WorkUnitId", workUnitId);
    }

    private async Task OnClose()
    {
        await JS.InvokeVoidAsync("modalInterop.hideModal", "form-modal");

    }

    private async Task OnShow()
    {
        await JS.InvokeVoidAsync("modalInterop.showModal", "form-modal");

    }

    private async Task Save()
    {
        // Check if the selected work unit task is null or has no Id, indicating a new task creation
        if (selectedWorkUnitTask == null || string.IsNullOrEmpty(selectedWorkUnitTask.Id))
        {
            string workUnitDesitinationId = await JS.InvokeAsync<string>("GetSession", "WorkUnitId");
            // Create a new WorkUnitTask
            selectedWorkUnitTask = new WorkUnitTask
                {
                    Id = Guid.NewGuid().ToString(), 
                    TaskId = draggedTaskId,          
                    WorkUnitId = workUnitDesitinationId,
                    SequenceNumber = selectedWorkUnitTask.SequenceNumber,
                    Duration = selectedWorkUnitTask.Duration,
                    DueDate = selectedWorkUnitTask.DueDate,
                };



            // Optionally, save the updated work unit to the database
            WorkUnit workUnitDesitination = await WorkUnitData.GetByIdAsync(workUnitDesitinationId);

            // Add the new task to the work unit
            workUnitDesitination.Tasks.Add(selectedWorkUnitTask);

            await WorkUnitData.UpdateAsync(workUnitDesitination);

            StateHasChanged();
        }
        else
        {

            // Update existing WorkUnitTask
            var existingTask = WorkUnit.Tasks.FirstOrDefault(t => t.Id == selectedWorkUnitTask.Id);
            if (existingTask != null)
            {
                existingTask.Duration = selectedWorkUnitTask.Duration;
                existingTask.DueDate = selectedWorkUnitTask.DueDate;
                existingTask.SequenceNumber = selectedWorkUnitTask.SequenceNumber;

                // Optionally, save the updated work unit to the database
                await WorkUnitData.UpdateAsync(WorkUnit);
            }
            StateHasChanged();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeModal");
        }
    }

}

    <div class="modal micromodal-slide" id="form-modal" aria-hidden="true">
        <div class="modal__overlay" tabindex="-1" data-micromodal-close>
            <div class="modal__container" role="dialog" aria-modal="true" aria-labelledby="form-modal-title">
                <header class="modal__header">
                    <h2 class="modal__title" id="form-modal-title">
                        Task Information
                    </h2>
                    <button class="modal__close" aria-label="Close modal" data-micromodal-close></button>
                </header>
                <main class="modal__content" id="form-modal-content">
                    <div class="card bg-light p-3">
                        <div class="card-body">
                        <EditForm Model="selectedWorkUnitTask" OnValidSubmit="Save">
                            <div class="form-group row mt-2">
                                <label class="col-sm-4 col-form-label fw-bold" for="Duration">Duration (In Minutes)</label>
                                <div class="col-8">
                                    <InputText id="duration" @bind-Value="selectedWorkUnitTask.Duration" class="form-control" placeholder="Duration" />
                                    <ValidationMessage For="@(() => selectedWorkUnitTask.Duration)" />
                                </div>
                            </div>
                            <div class="form-group row mt-2">
                                <label class="col-sm-4 col-form-label fw-bold" for="Duration">Due Date</label>
                                <div class="col-8">
                                    <InputDate id="dueDate" @bind-Value="selectedWorkUnitTask.DueDate" class="form-control" />
                                    <ValidationMessage For="@(() => selectedWorkUnitTask.DueDate)" />
                                </div>
                            </div>
                            <div class="form-group row mt-2">
                                <label class="col-sm-4 col-form-label fw-bold" for="SequenceNumber">Sequence Number</label>
                                <div class="col-8">
                                    <InputNumber id="sequenceNumber" @bind-Value="selectedWorkUnitTask.SequenceNumber" class="form-control" placeholder="Sequence Number" />
                                    <ValidationMessage For="@(() => selectedWorkUnitTask.SequenceNumber)" />
                                </div>
                            </div>
                            <div class="d-flex justify-content-center mt-4">
                                <button type="submit" @onclick="OnClose" class="btn mstc-gold-btn text-dark fw-bold px-4 mx-2">
                                    <i class="bi bi-floppy"></i> Save
                                </button>
                            </div>
                        </EditForm>
                        </div>
                    </div>
                </main>
                <footer class="modal-footer mt-2">
                    <!-- Footer content here if needed -->
                </footer>
            </div>
        </div>
    </div>


