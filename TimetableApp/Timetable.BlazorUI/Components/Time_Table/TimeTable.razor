@page "/timetable/{courseId?}"
@inject ICourseData CourseData

@using Microsoft.AspNetCore.Authorization
@using Timetable.BlazorUI.Components.Components

@inject ITaskTypeData TaskTypeData
@inject IUserData UserData
@inject IWorkUnitData WorkUnitData
@inject IWorkTaskData WorkTaskData
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer
@attribute [Authorize]

<div class="d-flex">
    <!-- Week Column -->
    <div class="week-column d-flex flex-column">
        @for (int i = 1; i <= course.Term.Duration; i++)
        {
            <div class="workUnit-Row d-flex align-items-center justify-content-center"
                 style="height: @(SingleRowHeightPercentage())vh;">
                <div class="vertical-text">
                    <div class="preview-week-number preview-emphasis">Week @i</div>
                    <div class="preview-due-date preview-finetext ">@course.StartDate.AddDays(7 * (i - 1)).ToString("MM/dd/yy")</div>
                </div>
            </div>
        }
    </div>

    <div class="flex-grow-1 d-flex flex-column">
        @foreach (WorkUnit workUnit in workUnits)
        {
            <div class="work-unit-container workUnit-Row">
                <WorkUnitComponent WorkUnit="workUnit" WorkTasks="workTasks" SingleRowHeightPercentage="@SingleRowHeightPercentage()" OnSelected="HandleWorkUnitSelected" />
            </div>
        }
    </div>
    
    <div class="tool-column d-flex flex-column ml-5">
        <!-- WorkUnit Form -->
        <WorkUnitForm @ref="WorkUnitForm" Course="@course" WorkUnitToEdit="selectedWorkUnit" OnWorkUnitFormSubmit="UpdateWorkUnits" />

        <!-- WorkTask Form -->
        <WorkTaskForm @ref="WorkTaskForm" OnWorkTaskFormSubmit="UpdateWorkTasks" />
    </div>
</div>


@code {
    [Parameter]
    public string? courseId { get; set; }

    private List<WorkUnit> workUnits = new List<WorkUnit>();
    private List<WorkTask> workTasks = new List<WorkTask>(); 

    private WorkUnit? selectedWorkUnit;
    private Course course = new Course();

    private int tableVhPercentage { get; } = 125;
    private WorkUnitForm WorkUnitForm;
    private WorkTaskForm WorkTaskForm;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(courseId))
        {
            course = await CourseData.GetCourseAsync(courseId);
            var tempWorkUnits = await WorkUnitData.GetAsync();

            if (tempWorkUnits.Any())
            {
                workUnits = tempWorkUnits.FindAll(workUnit => workUnit.CourseId == course.Id);
                workUnits = workUnits.OrderBy(WorkUnit => WorkUnit.SequenceNumber).ToList();
            }

            // Load existing work tasks (if any)
            workTasks = await WorkTaskData.GetAsync();
        }
    }

    private double SingleRowHeightPercentage()
    {
        return tableVhPercentage / course.Term.Duration;
    }

    private async Task UpdateWorkUnits(WorkUnit workUnit)
    {

        var index = workUnits.FindIndex(wUnit => wUnit.Id == workUnit.Id);

        if (index != -1)
        {
            workUnits[index] = workUnit;
        }
        else
        {
            workUnits.Add(workUnit);
        }

        course.WorkUnits = workUnits;
        course = await WorkUnitDateService.UpdateWorkUnitsStartAndEndDate(course, WorkUnitData);
        
        await CourseData.UpdateCourseAsync(course);
    }

    private async Task UpdateWorkTasks(WorkTask workTask)
    {
        // Check if the task already exists in the list
        var index = workTasks.FindIndex(t => t.Id == workTask.Id);

        if (index != -1)
        {
            // Update existing task
            workTasks[index] = workTask;
        }
        else
        {
            // Add new task
            workTasks.Add(workTask);
        }

        // Save or update task in database
        if (index == -1)
        {
            await WorkTaskData.CreateAsync(workTask);
        }
        else
        {
            await WorkTaskData.UpdateAsync(workTask);
        }

        // Update UI
        StateHasChanged();
    }

    private void HandleWorkUnitSelected(WorkUnit workUnit)
    {
        selectedWorkUnit = workUnit;
    }

    private async Task OnClose()
    {
      

    }
}

