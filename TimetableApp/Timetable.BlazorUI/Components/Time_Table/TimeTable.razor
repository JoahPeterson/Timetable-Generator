@page "/timetable/{courseId?}"
@inject ICourseData CourseData
@using Microsoft.AspNetCore.Authorization
@using Timetable.BlazorUI.Components.Components
@inject ITaskTypeData TaskTypeData
@inject IUserData UserData
@inject IWorkUnitData WorkUnitData
@inject IWorkTaskData WorkTaskData
@inject WorkUnitDateService WorkUnitDateService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime JS
@rendermode InteractiveServer
@attribute [Authorize]

<div class="d-flex position-relative timetable-main">
    <!-- Week Column -->
    <div class="week-column d-flex flex-column">
        @for (int i = 1; i <= course.Term.Duration; i++)
        {
            <div class="workUnit-Row d-flex align-items-center justify-content-center"
                 style="height: @(SingleRowHeightPercentage())vh;">
                <div class="vertical-text">
                    <div class="preview-week-number preview-emphasis">Week @i</div>
                    <div class="preview-due-date preview-finetext ">@course.StartDate.AddDays(7 * (i - 1)).ToString("MM/dd/yy")</div>
                </div>
            </div>
        }
    </div>

    <div class="flex-grow-1 d-flex flex-column">
        @foreach (WorkUnit workUnit in workUnits)
        {
            <div class="work-unit-container workUnit-Row">
                <WorkUnitComponent WorkUnit="workUnit" WorkTasks="workTasks" SingleRowHeightPercentage="@SingleRowHeightPercentage()" OnSelected="HandleWorkUnitSelected" Course="@course" />
            </div>
        }
    </div>
    
    <div class="tool-column d-flex flex-column ml-5">
        <!-- WorkUnit Form -->
        <WorkUnitForm @ref="WorkUnitForm" Course="@course" WorkUnitToEdit="selectedWorkUnit" OnWorkUnitFormSubmit="UpdateWorkUnits" OnWorkUnitDelete="RemoveDeletedWorkUnitFromCourse" />

        <!-- WorkTask Form -->
        <WorkTaskForm @ref="WorkTaskForm" OnWorkTaskFormSubmit="UpdateWorkTasks" />

        <div id="trash-bin" style="display: none;" class="justify-content-center align-items-center mt-3"
             @ondrop="HandleDeleteDrop"
             ondragover="event.preventDefault();">
            <i class="bi bi-trash text-danger" style="font-size: 5rem;"></i>
        </div>
    
    </div>
</div>


@code {
    [Parameter]
    public string? courseId { get; set; }

    private List<WorkUnit> workUnits = new List<WorkUnit>();
    private List<WorkTask> workTasks = new List<WorkTask>(); 

    private WorkUnit? selectedWorkUnit;
    private Course course = new Course();

    private int tableVhPercentage { get; } = 125;
    private WorkUnitForm WorkUnitForm;
    private WorkTaskForm WorkTaskForm;

    

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(courseId))
        {
            course = await CourseData.GetCourseAsync(courseId);

            if (course.WorkUnits.Any())
                workUnits = course.WorkUnits;

            // Load existing work tasks (if any)
            workTasks = await WorkTaskData.GetAsync();
        }
    }

    private double SingleRowHeightPercentage()
    {
        if (course.Term.Duration <= 8)
        {
            return tableVhPercentage / course.Term.Duration;
        }
        else if (course.Term.Duration > 8 && course.Term.Duration <= 12)
        {
            return (tableVhPercentage / course.Term.Duration) + 5;
        }
        else
        {
            return tableVhPercentage / course.Term.Duration + 8;
        }
    }

    private async Task UpdateWorkUnits(WorkUnit workUnit)
    {
        var index = workUnits.FindIndex(wUnit => wUnit.Id == workUnit.Id);

        if (index != -1)
        {
            workUnits[index] = workUnit;
            course.WorkUnits[index] = workUnit;
            course = await WorkUnitDateService.UpdateWorkUnitsStartAndEndDate(course);

            workUnits = course.WorkUnits;
        }
        else
        {
            course.WorkUnits.Add(workUnit);
            workUnits = course.WorkUnits;
            await CourseData.UpdateCourseAsync(course);
        }
    }

    private async Task UpdateWorkTasks(WorkTask workTask)
    {
        // Check if the task already exists in the list
        var index = workTasks.FindIndex(t => t.Id == workTask.Id);

        if (index != -1)
        {
            // Update existing task
            workTasks[index] = workTask;
        }
        else
        {
            // Add new task
            workTasks.Add(workTask);
        }

        // Save or update task in database
        if (index == -1)
        {
            await WorkTaskData.CreateAsync(workTask);
        }
        else
        {
            await WorkTaskData.UpdateAsync(workTask);
        }

        // Update UI
        StateHasChanged();
    }

    private async Task HandleDeleteDrop(DragEventArgs e)
    {
        // Get ID's from session storage
        string taskId = await JS.InvokeAsync<string>("GetSession", "TaskId");
        string workUnitId = await JS.InvokeAsync<string>("GetSession", "WorkUnitId");

        // Check if taskIf is null or empty
        if (!string.IsNullOrEmpty(taskId))
        {
            // Find the WorkUnit in the Course
            WorkUnit workUnit = course.WorkUnits.Where(c => c.Id == workUnitId).First();

            // Find the WorkUnitTask in the WorkUnit
            WorkUnitTask workUnitTask = workUnit.Tasks.Where(w => w.Id == taskId).First();

            // Remove the WorkUnitTask from the list of tasks on the WorkUnit
            workUnit.Tasks.Remove(workUnitTask);

            // Update the WorkUnit in the MongoDB
            WorkUnitData.UpdateAsync(workUnit);

            // Update the page
            StateHasChanged();

            // Hide Trash Bin
            await JS.InvokeVoidAsync("HideElement", "trash-bin");
        }
    }

    private void HandleWorkUnitSelected(WorkUnit workUnit)
    {
        selectedWorkUnit = workUnit;
    }

    private async Task RemoveDeletedWorkUnitFromCourse(WorkUnit workUnit)
    {
        course.WorkUnits.Remove(workUnit);
        await CourseData.UpdateCourseAsync(course);
    }
}

