@using Microsoft.AspNetCore.Authorization
@using Timetable.BlazorUI.Components.Pages
@inject IWorkUnitData WorkUnitData
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject WorkUnitDateService WorkUnitDateService
@inject DuplicationService DuplicationService
@inject IUserData UserData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authProvider
@rendermode InteractiveServer
@attribute [Authorize]

<!-- Toggle Button for the collapsible form -->
<button class="btn mstc-gold-btn shadow mb-2" id="toggleBtn" type="button" data-bs-toggle="collapse" data-bs-target="#workUnitCollapse" aria-expanded="false" aria-controls="workUnitCollapse">
   <i class="bi bi-eye"></i> Work Unit Form
</button>

<!-- Collapsible form -->
<div class="collapse mb-2" id="workUnitCollapse">
    <div class="card card-body bg-light shadow">
        <EditForm FormName="WorkUnitForm" Model="workUnit" OnValidSubmit="@SaveWorkUnit" class="form-inline">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Inline Form Fields -->
            <div class="form-group mx-sm-3 mb-2">
                <label class="fw-bold" for="Name">Work Unit Name</label>
                <InputText id="name" @bind-Value="workUnit.Name" class="form-control" placeholder="Work Unit Name" />
                <ValidationMessage For="@(() => workUnit.Name)" />
            </div>

            <div class="form-group mx-sm-3 mb-2">
                <label class="fw-bold" for="duration">Duration</label>
                <InputSelect id="duration" @bind-Value="workUnit.Duration" class="form-control">
                    @for (int i = 1; i <= 4; i++)
                    {
                        <option value="@i">@i weeks</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => workUnit.Duration)" />
            </div>
            <div class="d-flex flex-column align-items-center mt-3 w-100">
                <div class="d-flex flex-row justify-content-center">
                    <div class="d-block m-1">
                        <button type="reset" @onclick="HandleReset" class="btn btn-secondary text-nowrap">
                            <i class="bi bi-arrow-counterclockwise"></i> Reset
                        </button>
                    </div>
                    <div class="d-block m-1">
                        <button type="delete" @onclick="() => ShowModal(workUnit)" class="btn btn-danger text-nowrap">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                    <div class="d-block m-1">
                        <button @onclick="async () => await HandleWorkUnitDuplication(workUnit)" class="btn btn-light btn-outline-dark text-nowrap">
                            <i class="bi bi-copy"></i> Copy
                        </button>
                    </div>
                </div>
                <div class="row m-1 w-100 text-center">
                    <button type="submit" class="btn mstc-gold-btn d-block mt-1"><i class="bi bi-floppy"></i> Save</button>
                </div>
            </div>
           
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Course Course { get; set; }

    [Parameter]
    public WorkUnit? WorkUnitToEdit { get; set; }

    [Parameter]
    public EventCallback<WorkUnit> OnWorkUnitFormSubmit { get; set; }

    [Parameter]
    public Action MyProperty { get; set; }

    private bool isEditMode = false;

    private WorkUnit workUnit = new WorkUnit();

    protected override void OnParametersSet()
    {
        if (WorkUnitToEdit != null)
        {
            workUnit = WorkUnitToEdit;
            isEditMode = true;
            JS.InvokeVoidAsync("showCollapse", "workUnitCollapse");
            return;
        }
        workUnit = new WorkUnit();
    }

    private async void Delete()
    {
        Course.WorkUnits.Remove(workUnit);
        await WorkUnitData.DeleteAsync(workUnit.Id!);

        // StateHasChanged() wasn't updating the page, so used this instead
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        Snackbar.Add("Work Unit Deleted", Severity.Success);
    }

    private async Task SaveWorkUnit()
    {

        if (isEditMode)
        {
            workUnit.AuditInformation.LastModified = DateTime.Now;
            await WorkUnitData.UpdateAsync(workUnit);
            await HandleSubmit(workUnit);
            isEditMode = false;
        }
        else
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

            WorkUnit newWorkUnit = new WorkUnit
                {
                    Name = workUnit.Name,
                    SequenceNumber = Course.WorkUnits.Count() + 1,
                    Duration = workUnit.Duration,
                    CourseId = Course.Id
                };

            newWorkUnit.AuditInformation.CreatedById = mongoUser.Id;

            newWorkUnit = WorkUnitDateService.SetWorkUnitStartAndEndDate(Course, newWorkUnit);

            await WorkUnitData.CreateAsync(newWorkUnit);

            await HandleSubmit(newWorkUnit);
            workUnit = new WorkUnit();
        }
    }

    private async Task HandleSubmit(WorkUnit workUnit)
    {
        OnWorkUnitFormSubmit.InvokeAsync(workUnit);
    }

    private async Task HandleReset()
    {
        isEditMode = false;
        workUnit = new WorkUnit();

        StateHasChanged();
    }

    private Task HandleWorkUnitChange(WorkUnit updatedWorkUnit)
    {
        // Update the form with the new WorkUnit
        workUnit = updatedWorkUnit;
        return Task.CompletedTask;
    }

    private async Task HandleWorkUnitDuplication(WorkUnit workUnitToDuplicate)
    {
        WorkUnit dupeWorkUnit = await DuplicationService.DuplicateWorkUnitAsync(Course, workUnitToDuplicate);
        await HandleSubmit(dupeWorkUnit);

        // // Make sure we are not editing a task
        // WorkUnitToEdit = null;

        // // The new duplicated task
        // WorkUnit dupeWorkUnit = new WorkUnit
        //     {
        //         Name = workUnitToDuplicate.Name.Contains(" -COPY") ? workUnitToDuplicate.Name : workUnitToDuplicate.Name + " -COPY",
        //         Duration = workUnitToDuplicate.Duration,
        //         CourseId = workUnitToDuplicate.CourseId,
        //         SequenceNumber = Course.WorkUnits.Count + 1,
        //     };
        
        // // Gather info
        // var authState = await authProvider.GetAuthenticationStateAsync();
        // var mongoUser = await UserData.GetUserFromAuthenticationAsync(authState.User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier"))?.Value);

        // // Set Audit info
        // dupeWorkUnit.AuditInformation.CreatedById = mongoUser.Id;

        // // Set Dates
        // dupeWorkUnit = WorkUnitDateService.SetWorkUnitStartAndEndDate(Course, dupeWorkUnit);

        // // Create Work unit in database
        // await WorkUnitData.CreateAsync(dupeWorkUnit);

        // // Handle the submit
        // await HandleSubmit(dupeWorkUnit);

        // // Assign tasks to duplicated work unit
        // dupeWorkUnit.Tasks = HandleWorkUnitTaskDuplication(workUnitToDuplicate.Tasks, dupeWorkUnit);

        // // Update the duplicated work unit to include duplicated tasks
        // await WorkUnitData.UpdateAsync(dupeWorkUnit);

        // // reset
        // workUnit = new WorkUnit();
    }

    private List<WorkUnitTask> HandleWorkUnitTaskDuplication(List<WorkUnitTask> tasks, WorkUnit workUnit)
    {
        // List to hold duplicated work unit tasks
        List<WorkUnitTask> duplicatedTasks = new List<WorkUnitTask>();

        // Loop through the tasks and update them acoordingly 
        foreach(var task in tasks)
        {
            task.Id = Guid.NewGuid().ToString();
            task.WorkUnitId = workUnit.Id;
            task.DueDate = workUnit.EndDate;
            duplicatedTasks.Add(task);
        }

        // Return the updated tasks list
        return duplicatedTasks;
    }

    private async Task ShowModal(WorkUnit workUnit)
    {
        var parameters = new DialogParameters<Confimation_Dialog>
        {
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = DialogService.Show<Confimation_Dialog>("Delete", parameters, options);

        var result = await dialogResult.Result;

        if (!result.Canceled)
        {
            Delete();
        }
    }
}
